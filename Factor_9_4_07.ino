
// Factor-9
// September 18th 23
// Matthew Bryan ANK TropicAnthropic

#include <Arduboy2.h>
#include <ArduboyTones.h>
Arduboy2 arduboy;
Sprites sprites;
ArduboyTones sound(arduboy.audio.enabled);

const uint8_t PROGMEM BlitterBrothers[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18, 0x00, 0xf8, 0xf8, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x80, 0xc0, 0x40, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x8f, 0x80, 0x80, 0x80, 0x80, 0x0f, 0x0f, 0x00, 0x80, 0x80, 0x0f, 0x0f, 0x00, 0x07, 0x0f, 0x0d, 0x0d, 0x0d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x19, 0x19, 0xff, 0xef, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd8, 0xd8, 0x00, 0x00, 0x30, 0x30, 0xf8, 0xf8, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0xf8, 0xf8, 0x30, 0x30, 0x00, 0x00, 0xe0, 0xf0, 0x50, 0x50, 0x70, 0x60, 0x00, 0x00, 0xf0, 0xf0, 0x60, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00, 0x00, 0x01, 0x03, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x8c, 0x8c, 0xff, 0xf7, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0x00, 0xf0, 0xf8, 0x98, 0x98, 0xf8, 0xf0, 0x00, 0x00, 0x18, 0x18, 0xfc, 0xfc, 0x18, 0x18, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0x00, 0x98, 0x9c, 0xac, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x33, 0x1e, 0x1e, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x98, 0x9c, 0xac, 0xcc, 0xc8, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0xf8, 0xf0, 0x00, 0x18, 0x18, 0xfc, 0xfc, 0x18, 0x18, 0x00, 0x00, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM TitleScreen[] = {
128, 64,
0x00, 0xfe, 0x02, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xfa, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfa, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x02, 0xfe, 0x00, 
0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 
0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0xe0, 0xe0, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xa0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 
0x00, 0x7f, 0xe0, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83, 0x8f, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x0d, 0x0d, 0x0d, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0x0d, 0x0d, 0x0d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8f, 0x83, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x83, 0x87, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe0, 0x7f, 0x00, 
0x00, 0x00, 0x01, 0x07, 0x1e, 0x79, 0xe7, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xf6, 0x7b, 0x1d, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x0f, 0x1e, 0xff, 0xfe, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xfe, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xfe, 0xfe, 0xff, 0x7e, 0x3f, 0x1f, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x3d, 0x3b, 0x3e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe7, 0x79, 0x1e, 0x07, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1e, 0x79, 0xe7, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xe0, 0x60, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe7, 0x79, 0x1e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1e, 0x79, 0xe7, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x81, 0x07, 0x0f, 0x1f, 0x3f, 0x3e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x7c, 0x3e, 0x1f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x40, 0x7f, 0x7f, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7f, 0x7f, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe7, 0x79, 0x1e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1e, 0x79, 0x67, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x67, 0x79, 0x1e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM LargeBackground[] = {
128, 64,
0x92, 0x24, 0xd9, 0x02, 0xb5, 0x48, 0x93, 0x64, 0x99, 0x62, 0x8c, 0x71, 0x86, 0x68, 0x95, 0xea, 0xb0, 0x6f, 0xdc, 0x7a, 0xd7, 0xfe, 0xaa, 0xff, 0x75, 0xdf, 0xfb, 0xde, 0x77, 0xfd, 0xaf, 0xfd, 0xff, 0xab, 0xff, 0x7e, 0xeb, 0xff, 0x5d, 0xff, 0xf7, 0xdd, 0x7f, 0xf6, 0xdf, 0x7d, 0xf7, 0xde, 0x7f, 0xf5, 0x5f, 0xfd, 0x77, 0xdd, 0xf7, 0x5e, 0xfd, 0xb2, 0xed, 0xf2, 0x8d, 0x72, 0x8d, 0x72, 0x8d, 0x72, 0x8d, 0x72, 0x8d, 0x72, 0xcd, 0x32, 0xed, 0x12, 0xed, 0x32, 0xcd, 0x32, 0xed, 0x12, 0xed, 0x52, 0xad, 0x52, 0xed, 0x12, 0xed, 0x12, 0xed, 0x12, 0xec, 0x13, 0xec, 0x13, 0xec, 0x13, 0xac, 0x53, 0xa4, 0x5b, 0xa4, 0x13, 0x6c, 0x91, 0x2a, 0xc5, 0x1a, 0x64, 0x89, 0x36, 0xc8, 0x13, 0x64, 0x8a, 0x31, 0x46, 0xa8, 0x13, 0x48, 0x92, 0x25, 0x48, 0x93, 0x28, 0x42, 0x95, 0x20, 0x55, 
0x4a, 0xb5, 0x4a, 0xa5, 0x5a, 0x25, 0xd2, 0x0d, 0xf2, 0x45, 0xb8, 0xf7, 0xac, 0xfb, 0x56, 0xff, 0xb5, 0xef, 0x7d, 0xab, 0xff, 0xd6, 0x7d, 0xf7, 0xbf, 0xed, 0xff, 0xdb, 0x7f, 0xed, 0xff, 0xf7, 0xbe, 0xfb, 0x7f, 0xef, 0xbd, 0xf7, 0xff, 0xdf, 0x76, 0xff, 0xfb, 0xdf, 0x77, 0xff, 0xbd, 0xef, 0xff, 0xdb, 0x7f, 0xf7, 0xdd, 0xff, 0xb7, 0xfd, 0xef, 0xbe, 0xeb, 0xfe, 0xb7, 0xfd, 0x6f, 0xba, 0xed, 0x7a, 0xd5, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xba, 0x45, 0xba, 0x67, 0x98, 0x77, 0x89, 0x76, 0xad, 0x52, 0xad, 0x52, 0xad, 0x52, 0xad, 0x52, 0xad, 0x52, 0xad, 0x52, 0x25, 0xda, 0x21, 0x5e, 0x81, 0x7a, 0x84, 0x6b, 0x90, 0x6f, 0x90, 0x65, 0x9a, 0x65, 0x88, 0x77, 0x88, 0x72, 0x8d, 0x72, 0x84, 0x79, 0x82, 0x74, 0x89, 0x52, 0xac, 0x51, 0xa6, 0x48, 0xb5, 0x42, 0x9c, 0x61, 0x8a, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xbe, 0x57, 0xed, 0xbf, 0xda, 0xf7, 0xbd, 0x6b, 0xff, 0x5a, 0xef, 0xbd, 0xf7, 0xfe, 0xaf, 0xfb, 0xbf, 0xef, 0x7a, 0xff, 0xd7, 0x7d, 0xff, 0xd6, 0x7f, 0xff, 0xd5, 0xff, 0xbf, 0xfb, 0xef, 0x7e, 0xdf, 0xfb, 0xef, 0x7d, 0xff, 0xdb, 0xff, 0x6d, 0xff, 0xbe, 0xef, 0xfb, 0xbf, 0xef, 0x7a, 0xff, 0xae, 0xfb, 0xff, 0xae, 0xfb, 0xde, 0x77, 0xff, 0x55, 0xff, 0x57, 0xfd, 0x57, 0xa8, 0xdf, 0x21, 0xfe, 0xa5, 0x5a, 0xb7, 0x68, 0xd7, 0xac, 0x5b, 0xb4, 0xeb, 0x16, 0xfd, 0xa2, 0x5f, 0xa8, 0x77, 0xac, 0xd3, 0x3c, 0xe5, 0x9a, 0x75, 0xaa, 0x55, 0xfa, 0x85, 0x7e, 0xa1, 0xde, 0xb1, 0x4e, 0xb1, 0xee, 0x11, 0xee, 0x31, 0xce, 0x31, 0xee, 0x91, 0x6e, 0xb1, 0x4e, 0xb1, 0x4e, 0xf1, 0x0e, 0xf1, 0x4e, 0xb1, 0x4e, 0xb1, 0xce, 0x31, 0xce, 0xb1, 0x4e, 
0xef, 0x10, 0xef, 0xb5, 0x0a, 0x80, 0x12, 0xed, 0x5b, 0xb6, 0x4d, 0xfa, 0x55, 0xaf, 0x75, 0xdf, 0xb5, 0xdf, 0xfb, 0xbe, 0xeb, 0xbf, 0xee, 0xfb, 0xaf, 0xfd, 0x57, 0xff, 0xdd, 0x77, 0xef, 0x7d, 0xd7, 0xfe, 0xaf, 0xfb, 0x5e, 0xf7, 0xbf, 0xd7, 0xfd, 0xef, 0xbb, 0xff, 0xd6, 0xff, 0xbb, 0xef, 0x7d, 0xdf, 0x76, 0xff, 0x5b, 0xff, 0xd7, 0x7d, 0xdf, 0x76, 0xdf, 0x75, 0xdf, 0xb5, 0xdf, 0x75, 0xdb, 0x6d, 0xf7, 0x5d, 0xb6, 0xe9, 0x16, 0xeb, 0x56, 0xb9, 0xd7, 0x6d, 0xba, 0xcd, 0xff, 0x02, 0x03, 0xe3, 0x22, 0x23, 0x23, 0x13, 0x0b, 0xfa, 0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x03, 0x02, 0x03, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0xff, 0xb3, 0x6e, 0x99, 0xf7, 0x5a, 0x65, 0xde, 0xb5, 0x6a, 0xdd, 0xab, 0x74, 0xab, 0x5e, 0xf1, 0x8e, 0x79, 0xd7, 0x28, 0xdf, 0x20, 0xff, 0x84, 0x7b, 
0xf6, 0x09, 0xf6, 0x2d, 0xd0, 0x88, 0x00, 0xff, 0x45, 0xbe, 0x69, 0xd7, 0x6d, 0x9a, 0xf7, 0x2d, 0xda, 0xb5, 0x6e, 0xdb, 0xbe, 0xd7, 0x7a, 0xbf, 0xea, 0x5f, 0xfd, 0xb7, 0xed, 0x7f, 0xd5, 0x7f, 0xdb, 0x76, 0xdf, 0x75, 0xdf, 0xf5, 0xbf, 0x6a, 0xff, 0x56, 0xfb, 0xae, 0xff, 0x5a, 0xef, 0xbd, 0xf7, 0x5f, 0xf5, 0x7f, 0xd7, 0xbd, 0xf7, 0x5d, 0xf7, 0x5d, 0xab, 0xff, 0xaa, 0x75, 0xdf, 0x75, 0xdb, 0xad, 0x7e, 0xcb, 0x7f, 0x10, 0x07, 0x78, 0xb7, 0x6d, 0xda, 0x77, 0xad, 0xfa, 0x7f, 0xe0, 0xa0, 0x63, 0xa2, 0xe2, 0x62, 0xe4, 0xa8, 0xef, 0x60, 0xa0, 0xe0, 0x60, 0xa0, 0xe0, 0xe0, 0xa0, 0x60, 0xe0, 0x60, 0xa0, 0xe0, 0xe0, 0xa0, 0x7f, 0xed, 0xbb, 0x56, 0xed, 0x3b, 0xd5, 0x3e, 0x95, 0x2b, 0xee, 0x09, 0xb7, 0x49, 0x93, 0x2c, 0xd1, 0x06, 0x58, 0xe3, 0x0c, 0xd3, 0xaa, 0x45, 0xa9, 
0x5e, 0x31, 0x07, 0x00, 0x01, 0x00, 0x00, 0x03, 0x06, 0x09, 0x27, 0x0a, 0x55, 0x8e, 0x15, 0xab, 0x1e, 0xa9, 0x37, 0x4c, 0x7b, 0x56, 0xab, 0xdd, 0xb7, 0x7d, 0xef, 0x5a, 0xff, 0x55, 0xbf, 0xf5, 0xaf, 0xdd, 0x7b, 0xd7, 0x7e, 0xd5, 0x7f, 0xd5, 0xbf, 0x75, 0xef, 0x5a, 0xff, 0x55, 0xff, 0x55, 0x7f, 0xd5, 0x7f, 0x5b, 0xf7, 0x1e, 0xe5, 0x5f, 0xb5, 0x4b, 0xbd, 0x46, 0xbb, 0x45, 0xbb, 0x45, 0xba, 0x05, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x03, 0xfd, 0x97, 0x6a, 0xdd, 0x27, 0xfe, 0x95, 0x7b, 0xaf, 0x7a, 0xad, 0xf7, 0x5e, 0xb5, 0xef, 0x75, 0xde, 0x6b, 0xb7, 0xdc, 0x77, 0xda, 0x2f, 0xd5, 0x3f, 0xc5, 0x3a, 0xc7, 0x3a, 0x45, 0xb9, 0x47, 0x98, 0x63, 0x9c, 0x21, 0x56, 0xa9, 0x92, 0x6c, 0xc3, 0xb8, 0x66, 0xd9, 0xaa, 0x74, 0xdd, 0xa6, 0xfd, 0xab, 0xd6, 0xb9, 0x6f, 0xda, 
0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x08, 0x02, 0x50, 0x04, 0xa9, 0x00, 0x52, 0x04, 0x20, 0x0a, 0x01, 0x01, 0x01, 0x87, 0x09, 0x17, 0x2c, 0x73, 0x8e, 0x79, 0xa7, 0x5a, 0xed, 0x13, 0xfc, 0x27, 0xd9, 0x36, 0xed, 0x93, 0x6e, 0x99, 0x27, 0x49, 0x16, 0x41, 0x94, 0x29, 0x82, 0x2d, 0x92, 0x6d, 0x92, 0x25, 0xda, 0x25, 0x0a, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xbe, 0xe9, 0xb6, 0xdd, 0x72, 0xad, 0xda, 0xe7, 0x98, 0xf7, 0x0a, 0xfd, 0x93, 0x6c, 0xdb, 0x25, 0xfe, 0x45, 0xbb, 0x45, 0xbb, 0x44, 0xbb, 0x44, 0xab, 0x54, 0xa3, 0x5c, 0xa3, 0xd4, 0x2a, 0xf5, 0xa2, 0xdd, 0x72, 0xdc, 0xb5, 0xde, 0x75, 0xab, 0xfe, 0xad, 0x5b, 0xf6, 0xad, 0x7b, 0xd6, 0xbd, 0xeb, 0xb6, 0x5d, 0xfa, 0x57, 0xac, 0xf7, 0x5d, 0xb6, 
0x0f, 0x12, 0x3e, 0x60, 0x80, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x02, 0x01, 0x07, 0x08, 0x17, 0x0d, 0x12, 0x07, 0x08, 0x02, 0x08, 0x02, 0x05, 0x00, 0x05, 0x0a, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00, 0x80, 0xc0, 0xa0, 0xd0, 0x70, 0xd8, 0x74, 0xde, 0xb5, 0xee, 0xbb, 0xee, 0xbb, 0x6e, 0xdb, 0xb7, 0xfa, 0x2f, 0xfa, 0x2d, 0xdf, 0x2a, 0xd7, 0xae, 0x55, 0xea, 0xb7, 0xd8, 0x77, 0xd8, 0xe7, 0xb8, 0xc5, 0x76, 0xac, 0xef, 0x1a, 0xf7, 0x9e, 0x75, 0xdb, 0x6f, 0xba, 0xdd, 0x77, 0xda, 0xef, 0xba, 0xd7, 0x7d, 0xd6, 0xbb, 0xef, 0xba, 0xed, 0xb7, 0xda, 0x6f, 0xba, 0xed, 0x57, 0xfd, 0xab, 0x76, 0xdd, 0x77, 0xad, 
};

const uint8_t PROGMEM GameOver[] = {
128, 64,
0x24, 0xc9, 0x32, 0x44, 0xa9, 0x54, 0x89, 0x72, 0x85, 0x72, 0x94, 0x29, 0x52, 0xac, 0x51, 0x8e, 0x30, 0x45, 0xaa, 0x11, 0xaa, 0x41, 0x2a, 0xd4, 0x09, 0x64, 0x89, 0x56, 0x20, 0xce, 0x10, 0x6b, 0x84, 0x5a, 0x21, 0x5a, 0x85, 0x38, 0xc3, 0x2c, 0xd1, 0x8e, 0xf0, 0xa5, 0x6a, 0xd9, 0x70, 0xa9, 0xfc, 0x54, 0xef, 0xba, 0xdf, 0x75, 0x8e, 0x73, 0x8d, 0x72, 0xed, 0x52, 0xbf, 0xea, 0x5d, 0xf6, 0xff, 0xdb, 0xff, 0xb6, 0xfd, 0xea, 0xbd, 0xd2, 0xfd, 0xa6, 0xf9, 0x56, 0xe9, 0xde, 0x61, 0xde, 0xa9, 0x56, 0xe9, 0x16, 0xf9, 0x06, 0xf9, 0x06, 0xf9, 0x06, 0xf9, 0x06, 0xd9, 0x24, 0xcb, 0x34, 0x4b, 0x90, 0x6f, 0x80, 0x5a, 0xa5, 0x5a, 0x82, 0x74, 0x89, 0x52, 0xa5, 0x48, 0x95, 0x22, 0xc8, 0x25, 0x98, 0x62, 0x8c, 0x51, 0xa6, 0x48, 0x33, 0xc4, 0x19, 0xa2, 0x55, 0x4a, 0x91, 0x6a, 0x85, 
0xa5, 0x4a, 0x95, 0x6a, 0x91, 0x26, 0xd9, 0x22, 0x4c, 0xb1, 0x46, 0x39, 0xc2, 0x1c, 0xe1, 0x16, 0x69, 0x94, 0x23, 0xdc, 0x22, 0x55, 0xaa, 0x14, 0xe3, 0x1c, 0xe1, 0x0e, 0xf1, 0x0c, 0x73, 0x84, 0x7a, 0xc5, 0xf2, 0xad, 0xfa, 0xb5, 0xfe, 0x6b, 0xde, 0x7b, 0xd6, 0xbd, 0xd7, 0xed, 0xbb, 0xef, 0xba, 0x6f, 0x93, 0x6e, 0xd1, 0x6e, 0xd9, 0xb6, 0x6b, 0xdd, 0xb7, 0x6d, 0xda, 0xb7, 0xfd, 0xbf, 0xee, 0xfb, 0xbf, 0xee, 0x7b, 0xef, 0xbe, 0xfb, 0x6e, 0xf5, 0xdf, 0xb5, 0xff, 0x56, 0xff, 0x75, 0xdf, 0xf7, 0x5d, 0xff, 0x55, 0xff, 0xaa, 0x7f, 0xd4, 0xef, 0xb8, 0xdd, 0x72, 0xad, 0xf0, 0x6f, 0xd0, 0xad, 0xd2, 0x2c, 0xd3, 0xac, 0x53, 0xac, 0x51, 0xae, 0x51, 0xae, 0x51, 0xae, 0x51, 0xae, 0x51, 0xae, 0x51, 0xae, 0x51, 0xac, 0x53, 0xac, 0x53, 0xac, 0x52, 0xad, 0x52, 0xac, 0x53, 0xac, 
0x54, 0xab, 0x54, 0xaa, 0x55, 0xaa, 0x54, 0xab, 0x54, 0xab, 0x54, 0x8b, 0x74, 0x8b, 0x64, 0x9b, 0x64, 0x9b, 0x24, 0x1b, 0x44, 0xbb, 0x04, 0x7b, 0x84, 0x7b, 0x84, 0x7b, 0xa4, 0x5b, 0x05, 0x0f, 0x35, 0xff, 0xda, 0xef, 0xbd, 0xee, 0x7b, 0xdf, 0xf5, 0xbf, 0x6b, 0xfe, 0xd5, 0x2e, 0xfb, 0xa6, 0x59, 0xb6, 0x6d, 0xd3, 0xbe, 0x53, 0xee, 0xb5, 0xdb, 0xb6, 0x6d, 0xdb, 0x76, 0xff, 0xdd, 0x77, 0xde, 0xff, 0x75, 0xdf, 0x77, 0xfd, 0xdf, 0x75, 0xff, 0xdb, 0x7e, 0xeb, 0x7e, 0xd7, 0x7d, 0xd7, 0x6b, 0xbe, 0xeb, 0xdd, 0xb7, 0xfa, 0xaf, 0xfb, 0xae, 0xfb, 0xae, 0xfb, 0xdd, 0x7f, 0xf5, 0xdf, 0x7b, 0xee, 0x7f, 0xed, 0x7a, 0xd5, 0xae, 0x59, 0xf7, 0x8a, 0x7d, 0xd3, 0xac, 0xdb, 0x35, 0xea, 0x9d, 0x72, 0xcf, 0xb8, 0x67, 0xda, 0x35, 0xea, 0x5d, 0xa3, 0x7c, 0xcb, 0xb5, 0xca, 0xbd, 0x52, 
0xb5, 0x4a, 0xb5, 0x6a, 0x95, 0xfa, 0x05, 0xfa, 0x4d, 0xb2, 0x5d, 0xa2, 0x5f, 0xb0, 0x4f, 0x20, 0xdf, 0x22, 0xdd, 0xa3, 0x5c, 0xa1, 0x0a, 0xb5, 0x42, 0x94, 0x6a, 0x05, 0xd8, 0x23, 0x54, 0x00, 0x00, 0x00, 0x03, 0x0e, 0x75, 0xdf, 0xab, 0x7e, 0xd5, 0x7f, 0xd5, 0x7f, 0xda, 0x77, 0xae, 0xfd, 0xab, 0xfd, 0xab, 0xf4, 0x5f, 0xf5, 0x9a, 0xf7, 0xac, 0xdb, 0x35, 0xff, 0x6d, 0xbf, 0x75, 0x5f, 0x7d, 0x17, 0x7f, 0x2d, 0xb7, 0x1f, 0xb5, 0x1f, 0xae, 0x1b, 0x5f, 0x0d, 0x57, 0x0f, 0x3d, 0x57, 0xfd, 0xab, 0xfe, 0xeb, 0xbe, 0xeb, 0x7e, 0xdb, 0xfe, 0x6b, 0xff, 0xae, 0xfb, 0xff, 0xad, 0xf7, 0xff, 0xad, 0xff, 0xfb, 0xaf, 0xfd, 0xf7, 0xbf, 0xec, 0xdb, 0xf5, 0xae, 0x55, 0xfe, 0xa5, 0x5b, 0xf6, 0x5b, 0xb6, 0x6d, 0xda, 0xb7, 0x6d, 0xda, 0xb7, 0x6d, 0xda, 0xb7, 0x4a, 0xfe, 0x29, 0x97, 
0xbb, 0x44, 0xbb, 0xcd, 0x32, 0xed, 0x16, 0xe9, 0x96, 0x79, 0x87, 0x78, 0x97, 0x69, 0x9d, 0xe2, 0x1d, 0x6a, 0x15, 0x2a, 0x15, 0x0a, 0x05, 0x0a, 0x04, 0x02, 0x05, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xdd, 0xaa, 0x77, 0xdd, 0xab, 0xfe, 0xab, 0x55, 0xff, 0xad, 0x5a, 0xf7, 0x9e, 0x75, 0xab, 0xdd, 0xb6, 0x6d, 0xd4, 0xba, 0x54, 0xea, 0x58, 0xb2, 0xd0, 0x6a, 0xa0, 0xd5, 0xa0, 0x45, 0xd0, 0x8a, 0x80, 0x2a, 0x80, 0x2a, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x1a, 0x6f, 0xbd, 0xf7, 0xdd, 0x7f, 0xd5, 0x7f, 0xeb, 0xbe, 0xfb, 0xaf, 0xfa, 0xdf, 0xfb, 0xbe, 0xeb, 0xff, 0xb6, 0xfd, 0x6f, 0xfe, 0x5b, 0xfe, 0x77, 0xdd, 0xfa, 0xb7, 0x6d, 0xdb, 0x75, 0xdf, 0xa5, 0xfe, 0xb5, 0x6b, 0x5e, 0xb5, 0x4b, 0x36, 0xc9, 0x26, 0x99, 0x22, 0x54, 
0xed, 0x12, 0xed, 0x5a, 0xa5, 0x7e, 0x81, 0xfe, 0x15, 0xea, 0x1d, 0x23, 0x0c, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xdd, 0xaa, 0x77, 0xdd, 0x6a, 0xdf, 0x2a, 0xf5, 0x4f, 0xba, 0xeb, 0x16, 0xfd, 0xa3, 0x5e, 0xb5, 0x6a, 0xd7, 0x3a, 0xed, 0x93, 0x7e, 0xa5, 0x5b, 0xf6, 0x8d, 0x7a, 0xd7, 0xaa, 0xdd, 0x2a, 0xf7, 0x4c, 0xbb, 0x56, 0xe9, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0d, 0x3f, 0xeb, 0xbf, 0x7a, 0x6f, 0x5f, 0xba, 0x2f, 0x3b, 0x9e, 0x1b, 0x4f, 0x0e, 0x2b, 0x87, 0x15, 0xc7, 0xa3, 0x59, 0xb3, 0xdc, 0x37, 0xed, 0x37, 0xdd, 0x36, 0xcb, 0x36, 0xc9, 0x15, 0x6a, 0x95, 0x22, 0xcd, 0x30, 0xc5, 0x7a, 0xd5, 0xba, 
0xfd, 0x02, 0xff, 0xa4, 0x5b, 0xb5, 0x56, 0xed, 0x98, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x16, 0x0d, 0x1b, 0x34, 0x0b, 0x7e, 0x11, 0xef, 0x9a, 0x75, 0xaa, 0xd7, 0x2c, 0xfb, 0x45, 0xbe, 0x65, 0x9b, 0xf6, 0x0d, 0xfa, 0x25, 0xdf, 0xb1, 0x4e, 0xb5, 0xda, 0xb7, 0x48, 0xb7, 0xed, 0x5a, 0xf5, 0x5b, 0xed, 0x76, 0xdf, 0x75, 0xdf, 0x75, 0xdb, 0x6e, 0xb5, 0xff, 0xaa, 0xdd, 0x6f, 0xba, 0x57, 0x3d, 0x47, 0x15, 0x4b, 0xa4, 0x00, 0x09, 0x20, 0x02, 0x48, 0x00, 0x22, 0x58, 0x70, 0xda, 0xb4, 0x6e, 0xf1, 0x4f, 0xb8, 0xe7, 0x59, 0xb6, 0xcd, 0x3a, 0xe5, 0x1b, 0x64, 0x9b, 0x24, 0xd2, 0x0d, 0xf2, 0xa5, 0x78, 0xd7, 0x7e, 0xd5, 0xbb, 0xef, 0xba, 0x6d, 
0x5f, 0xf0, 0x4f, 0xba, 0xd5, 0x3b, 0xe6, 0x9d, 0x72, 0xaf, 0x54, 0xfa, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x06, 0x01, 0x0f, 0x08, 0x17, 0x0a, 0x35, 0x0b, 0x3c, 0x63, 0x3d, 0x6a, 0x56, 0xbd, 0x6b, 0x5e, 0xf5, 0x5f, 0xb5, 0xee, 0xbb, 0xed, 0xb7, 0xda, 0x6f, 0xf5, 0x5f, 0xb5, 0x2a, 0x5f, 0x0a, 0x45, 0x13, 0x08, 0x05, 0x12, 0x01, 0x04, 0x01, 0x04, 0x02, 0x00, 0x01, 0x80, 0x80, 0x80, 0xc0, 0x40, 0xe0, 0xa1, 0x71, 0xd7, 0xbd, 0x77, 0x8d, 0x7e, 0x83, 0x7d, 0x82, 0xfd, 0x52, 0xfd, 0x6b, 0xde, 0xbb, 0xf6, 0xad, 0x7e, 0xeb, 0x5c, 0xf7, 0x59, 0xfe, 0x53, 0xee, 0xb9, 0xd7, 
};

const uint8_t PROGMEM WinScreen[] = {
128, 64,
0x00, 0x55, 0x88, 0x02, 0x00, 0x00, 0x2a, 0x04, 0x29, 0xd4, 0x09, 0x72, 0x8c, 0x51, 0xaa, 0x54, 0xa9, 0x52, 0xa5, 0x58, 0xa1, 0x5a, 0xa0, 0x69, 0x98, 0x61, 0xda, 0x20, 0xd9, 0x62, 0x98, 0x65, 0xd8, 0x25, 0xf4, 0x09, 0xf6, 0x09, 0xf6, 0x09, 0xf2, 0x0d, 0xd2, 0x24, 0xc9, 0x12, 0xe5, 0x18, 0xc5, 0x3b, 0xc4, 0x0a, 0xe1, 0x0a, 0xb5, 0x48, 0x93, 0x6c, 0x91, 0x66, 0x88, 0x73, 0x84, 0x6b, 0x90, 0x67, 0x88, 0x67, 0x90, 0x67, 0x88, 0x53, 0x44, 0x8b, 0x40, 0x95, 0x2a, 0x55, 0xaa, 0x54, 0xab, 0x54, 0xba, 0x65, 0x98, 0x77, 0xc8, 0xb3, 0x6c, 0xd3, 0x68, 0xd7, 0xa8, 0x53, 0xed, 0x52, 0xa9, 0xd6, 0x68, 0xd7, 0xa0, 0x5f, 0xe0, 0x5b, 0xe4, 0x93, 0x74, 0xcb, 0xb4, 0x49, 0xb2, 0xec, 0x13, 0xec, 0x51, 0xae, 0x54, 0xa9, 0x12, 0xec, 0x19, 0x62, 0xdd, 0x24, 0xd9, 0x22, 0xdd, 0x28, 
0xe4, 0x09, 0xf2, 0x24, 0xc8, 0xb4, 0x40, 0xf8, 0x00, 0xf0, 0x11, 0xf0, 0x82, 0x71, 0x90, 0x65, 0x92, 0x61, 0x52, 0xa1, 0xa6, 0x51, 0xa2, 0x45, 0xa2, 0x45, 0xaa, 0x51, 0xa6, 0x59, 0xa2, 0x9d, 0x22, 0x5d, 0x22, 0x9d, 0x22, 0x9d, 0x22, 0xdd, 0x02, 0x5f, 0xc0, 0x1f, 0x61, 0x8e, 0x65, 0x0a, 0xd5, 0x2b, 0xc4, 0xbb, 0x44, 0xbb, 0xe4, 0x9b, 0xf4, 0xab, 0x74, 0xeb, 0x5c, 0xf3, 0xae, 0xf5, 0xba, 0xed, 0x7a, 0xd7, 0xfc, 0x6b, 0xfe, 0xd9, 0xff, 0xb4, 0xfb, 0xec, 0xbb, 0xf6, 0xd8, 0x77, 0xec, 0xb3, 0xfd, 0xa2, 0xfd, 0x4b, 0xf4, 0x8b, 0x76, 0xcd, 0x32, 0xcf, 0xb2, 0x4d, 0xb7, 0x4d, 0xf2, 0x0d, 0xfb, 0x46, 0xbd, 0x43, 0xbe, 0x45, 0xba, 0x47, 0xbc, 0x43, 0xae, 0x51, 0xae, 0x43, 0xb4, 0x43, 0xb4, 0x69, 0x92, 0x6c, 0xd9, 0x22, 0xdd, 0xb0, 0x4f, 0xb8, 0x63, 0x9c, 0x69, 0xda, 
0x97, 0x28, 0xd7, 0x09, 0x56, 0x4d, 0xc2, 0x1d, 0xc2, 0x2d, 0x43, 0xcc, 0x03, 0xd4, 0x0b, 0xc4, 0x0b, 0xc1, 0x16, 0x89, 0x04, 0xc3, 0x14, 0xe1, 0x9e, 0x61, 0xde, 0x61, 0x9e, 0xf1, 0x0e, 0xf2, 0x0d, 0xf3, 0x0c, 0xfb, 0x24, 0xdb, 0x56, 0xb8, 0x57, 0xaa, 0xdc, 0xab, 0x14, 0x01, 0x8a, 0x75, 0x8a, 0x75, 0xae, 0xd1, 0xfe, 0xab, 0xfe, 0xab, 0xfe, 0xab, 0xfd, 0xaf, 0xfb, 0xaf, 0xfa, 0xdf, 0x7d, 0xf7, 0xdd, 0x7f, 0xf7, 0xbd, 0xef, 0xfe, 0x7b, 0xef, 0xbe, 0xfb, 0xef, 0xfe, 0xbb, 0xff, 0xed, 0xbf, 0xfb, 0xde, 0xf7, 0x7f, 0xd5, 0xff, 0xb6, 0xfd, 0xaa, 0xfd, 0x6a, 0xd7, 0xb8, 0x57, 0xfc, 0x53, 0xae, 0xf9, 0x56, 0xed, 0xba, 0x6d, 0xda, 0xb5, 0x6a, 0xdd, 0xb2, 0xed, 0xb6, 0x69, 0xde, 0xb1, 0x6e, 0xd1, 0xaa, 0xe5, 0xa2, 0x55, 0xe2, 0x51, 0x96, 0xe1, 0x13, 0xf4, 0x03, 0xf4, 
0x74, 0xcb, 0xb4, 0x69, 0xd7, 0xb8, 0x65, 0xda, 0xaa, 0x75, 0xda, 0xb5, 0x6a, 0xdd, 0xb2, 0x6d, 0xda, 0xb6, 0x6d, 0xd6, 0xbd, 0xd3, 0x2e, 0xfb, 0x46, 0xbd, 0xd2, 0x6f, 0xb2, 0xdd, 0x62, 0xdd, 0xb2, 0x6c, 0xd5, 0x38, 0xe4, 0x59, 0x64, 0xd9, 0x32, 0xe9, 0x92, 0x30, 0x00, 0x06, 0x59, 0xf6, 0x5d, 0xeb, 0xbf, 0xea, 0xbf, 0xea, 0xbf, 0xea, 0xbf, 0xea, 0xbf, 0xfa, 0xaf, 0xfb, 0xfe, 0xaf, 0xfb, 0xff, 0xad, 0xff, 0xf7, 0xdf, 0x7d, 0xef, 0xfb, 0xbf, 0xfd, 0xef, 0xfe, 0xb7, 0xff, 0xfe, 0xab, 0xff, 0xdf, 0xfa, 0x6f, 0xff, 0xfd, 0x57, 0xfe, 0xf7, 0x5d, 0xff, 0xb5, 0xff, 0x6d, 0xdf, 0x7a, 0xa5, 0x6b, 0xd6, 0x25, 0xea, 0x55, 0xab, 0x66, 0xa9, 0x57, 0xea, 0x45, 0x5e, 0xc5, 0x5b, 0x86, 0xbd, 0x83, 0x7e, 0x05, 0x7e, 0x95, 0x6b, 0xb6, 0x4d, 0xbb, 0x56, 0xed, 0x5b, 0xb4, 0x6f, 
0x2f, 0x10, 0xef, 0x15, 0xea, 0x55, 0xb7, 0x6c, 0xdb, 0x65, 0xde, 0x35, 0xeb, 0x56, 0xb9, 0x4f, 0xf8, 0x17, 0xe9, 0x1e, 0x6a, 0x15, 0x6e, 0x15, 0x2b, 0x16, 0x2d, 0x13, 0x0e, 0x15, 0x0a, 0x17, 0x0c, 0x13, 0x0d, 0x16, 0x09, 0x07, 0x1d, 0x22, 0x0d, 0x0b, 0x02, 0x40, 0x10, 0x84, 0x21, 0xde, 0x6b, 0x9a, 0x77, 0xca, 0xbf, 0x6a, 0xdf, 0xaa, 0x7f, 0xb5, 0xfe, 0x6f, 0xfb, 0x5e, 0xfb, 0xaf, 0xfe, 0xeb, 0xbf, 0xf6, 0x5f, 0xfd, 0xb7, 0xff, 0xad, 0xff, 0x76, 0xdf, 0xfb, 0xbe, 0xef, 0x7d, 0xdf, 0x76, 0xff, 0x5b, 0xff, 0xdd, 0x77, 0xff, 0x5d, 0xf7, 0xdf, 0x7d, 0xd7, 0x7d, 0xd7, 0x7d, 0xd7, 0x6d, 0x9a, 0xf5, 0x6f, 0xda, 0xb5, 0xeb, 0x5d, 0xb6, 0xeb, 0xb6, 0x6d, 0xdb, 0xb6, 0xcd, 0x7b, 0xd4, 0x6f, 0xd9, 0xb7, 0x6a, 0xda, 0xb6, 0x6c, 0xf1, 0x52, 0xed, 0xba, 0xd5, 0x7f, 0xd5, 
0x54, 0xab, 0x56, 0xb9, 0x57, 0xea, 0x9d, 0x73, 0xae, 0xd5, 0xaa, 0x55, 0xcb, 0x24, 0xd3, 0xb0, 0x49, 0xb8, 0xc4, 0x3c, 0xc0, 0xbe, 0x50, 0xae, 0xd4, 0x2a, 0xf5, 0x8e, 0x71, 0xde, 0x23, 0x5c, 0x2b, 0x14, 0x0b, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x12, 0x00, 0xeb, 0x9e, 0x71, 0xcf, 0xba, 0x65, 0xdf, 0x34, 0xeb, 0x9d, 0x76, 0xab, 0xdd, 0xbf, 0x75, 0xef, 0x5e, 0xfb, 0x56, 0xff, 0xd5, 0x7f, 0xab, 0xfe, 0x57, 0xfd, 0xab, 0xff, 0xaa, 0xff, 0x56, 0xfb, 0xaf, 0xfd, 0x57, 0xff, 0x6d, 0xf7, 0x5d, 0xff, 0xd5, 0x7f, 0xad, 0xf7, 0x5d, 0xf6, 0x5b, 0xad, 0xf7, 0x5a, 0xef, 0x35, 0xde, 0xeb, 0x7f, 0xd6, 0x7f, 0xd5, 0x7f, 0xd6, 0x7f, 0xd5, 0x7f, 0xda, 0xbf, 0xd5, 0x7f, 0xab, 0xde, 0x77, 0xdd, 0xb7, 0x5d, 0xf7, 0x9d, 0x77, 0xaa, 0x5f, 0xb5, 0x6b, 0x1e, 
0x81, 0x56, 0x0d, 0xb1, 0x4f, 0x34, 0xeb, 0x1d, 0xea, 0xb7, 0xcc, 0xbb, 0x6e, 0xdb, 0xb4, 0x6f, 0xda, 0xad, 0x7a, 0xd7, 0xac, 0xfb, 0x55, 0xee, 0xb9, 0xf7, 0xac, 0xdb, 0xf6, 0xad, 0xfa, 0xb4, 0xee, 0xbc, 0x6a, 0x1e, 0xa0, 0x5c, 0xa2, 0xfc, 0xb0, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x06, 0x25, 0x0a, 0xa3, 0x0e, 0x25, 0x8e, 0x19, 0xa7, 0x1a, 0xb5, 0x0e, 0x75, 0x1b, 0x6d, 0x5f, 0x7b, 0xd6, 0x7f, 0x55, 0xef, 0xbd, 0x6b, 0xbf, 0x6a, 0xbf, 0x6a, 0xdf, 0xb5, 0x7f, 0xaa, 0xdf, 0x35, 0xff, 0xab, 0x3d, 0xef, 0x1b, 0xee, 0x1b, 0xe5, 0x1e, 0xe3, 0x1d, 0x63, 0x1c, 0xc3, 0x44, 0xfd, 0xab, 0xfe, 0x6b, 0xdf, 0x7a, 0xd7, 0x7c, 0xd3, 0xac, 0x53, 0xf6, 0x11, 0xf6, 0x59, 0x76, 0xd1, 0x37, 0xe8, 0x1b, 0xe8, 0x0b, 0xf0, 0x03, 0xc0, 0x41, 0x80, 0x01, 0x80, 0x80, 0x80, 
0xda, 0xb7, 0x5a, 0xf4, 0x4d, 0xb8, 0x69, 0xd2, 0xb2, 0x66, 0xd0, 0xa7, 0xe4, 0xab, 0x46, 0xd9, 0x66, 0xcd, 0x5b, 0xa6, 0xdd, 0x4a, 0xb7, 0x4d, 0xda, 0xa7, 0x9c, 0x6b, 0x96, 0xed, 0x1a, 0x27, 0x1a, 0x05, 0x01, 0x00, 0x00, 0x43, 0x9c, 0x2b, 0x5e, 0xeb, 0xb5, 0x5f, 0xea, 0xbe, 0x6a, 0xfc, 0x54, 0xf8, 0xa8, 0xf8, 0x50, 0xf0, 0xa2, 0xe8, 0xc2, 0xd0, 0x44, 0xd2, 0x80, 0xa5, 0x80, 0x81, 0x80, 0x10, 0x00, 0x03, 0x05, 0x0a, 0x15, 0x2e, 0x55, 0xab, 0x76, 0x8d, 0x72, 0xad, 0x5b, 0x94, 0xcb, 0x95, 0xc2, 0x55, 0xe8, 0x42, 0xe8, 0xb7, 0xe0, 0xbf, 0xf0, 0xef, 0xbc, 0xeb, 0x7d, 0xb7, 0xfd, 0xaf, 0xfa, 0x5f, 0xf5, 0x5f, 0xf5, 0x5f, 0xb5, 0x4e, 0xf9, 0xa6, 0xdd, 0x63, 0x9e, 0x71, 0x8f, 0x70, 0x8f, 0x30, 0xcd, 0x52, 0xed, 0x50, 0xf7, 0x58, 0xb6, 0xed, 0xba, 0x6f, 0xda, 0x6d, 
};

const uint8_t PROGMEM smallCube[] = {
32, 34,
0x00, 0x80, 0xc0, 0x40, 0xe0, 0x40, 0xf0, 0x50, 0xb0, 0xe8, 0x58, 0xf4, 0x5c, 0xf4, 0x5a, 0xee, 0xbd, 0xea, 0xb6, 0x7c, 0xe8, 0x58, 0xf8, 0x50, 0xf0, 0xa0, 0xe0, 0x40, 0xc0, 0x80, 0x80, 0x00, 
0x00, 0x2a, 0x41, 0x09, 0x51, 0x8b, 0x25, 0x97, 0x45, 0x2f, 0x95, 0x5f, 0x97, 0x3d, 0xbf, 0x6b, 0xfe, 0xbf, 0xd5, 0xff, 0x5f, 0xf5, 0xbf, 0xef, 0xb5, 0x5f, 0xf5, 0x5f, 0xb5, 0xef, 0x55, 0xbb, 
0x00, 0x45, 0x10, 0x85, 0x20, 0x0a, 0x50, 0x02, 0xa4, 0x09, 0xa2, 0x48, 0x12, 0xa5, 0x08, 0xf7, 0x5b, 0xae, 0xfd, 0xab, 0x5f, 0xf2, 0xaf, 0xda, 0xb5, 0x6f, 0xd5, 0x3b, 0xe6, 0x9d, 0x73, 0xce, 
0x00, 0x02, 0x10, 0x02, 0x08, 0x01, 0x28, 0x02, 0x48, 0x02, 0x54, 0x00, 0xa9, 0x02, 0x94, 0x29, 0xef, 0x9a, 0x75, 0xae, 0xd3, 0x2e, 0xf9, 0x06, 0x7d, 0x0a, 0x35, 0x0b, 0x1c, 0x03, 0x1c, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM ditherCubeSmallMask[] = {
0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM CylinderSmall[] = {
32, 42,
0xc0, 0xe0, 0xd0, 0x70, 0xa8, 0x78, 0xb4, 0xec, 0x3c, 0xe8, 0xbe, 0xea, 0xde, 0xfa, 0x56, 0xfa, 0x2e, 0xfa, 0xae, 0x7a, 0xd6, 0xfc, 0xf4, 0xdc, 0xf4, 0xac, 0x78, 0xd8, 0xf0, 0xd0, 0x60, 0x80, 
0x01, 0x02, 0x07, 0x87, 0x7d, 0x8f, 0x7d, 0x9f, 0xf5, 0x5f, 0xfe, 0xb7, 0xdd, 0x7f, 0xf7, 0x5d, 0xff, 0xb7, 0xfd, 0x5f, 0xfb, 0x7f, 0xd6, 0x7f, 0xdd, 0xf7, 0xbf, 0x6d, 0xb7, 0xdb, 0x27, 0x00, 
0x00, 0x00, 0x00, 0x10, 0xef, 0x10, 0x6f, 0x92, 0x7d, 0xd7, 0xaa, 0x7d, 0xd7, 0x7d, 0xd7, 0x6d, 0xbf, 0xea, 0xbf, 0xd5, 0x7f, 0xab, 0xfd, 0xaf, 0x5a, 0xf7, 0xae, 0xd5, 0x3b, 0xe6, 0x19, 0x00, 
0x00, 0x00, 0x00, 0x10, 0xa7, 0x48, 0x37, 0xc8, 0x37, 0xca, 0xbd, 0x6b, 0xd6, 0x2d, 0xfb, 0x55, 0xae, 0x7b, 0xd6, 0xad, 0xf7, 0xad, 0xda, 0xb7, 0x6d, 0xda, 0x27, 0xfc, 0x03, 0xfe, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x10, 0x25, 0x4a, 0x91, 0x2e, 0xd1, 0x2e, 0xd5, 0x2a, 0xdd, 0xa3, 0x5e, 0xb5, 0x6b, 0x95, 0x7e, 0xa5, 0x5a, 0xb6, 0x6d, 0x92, 0x6f, 0xd8, 0x27, 0xd9, 0x26, 0x59, 0x22, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x03, 0x02, 0x01, 0x03, 0x02, 0x01, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM CylinderSmallMask[] = {
0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM smallIso[] = {
32, 31,
0x00, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x70, 0xd0, 0x78, 0xd4, 0xfc, 0xac, 0xfa, 0x6e, 0xfd, 0xb6, 0xff, 0xfa, 0xae, 0xfc, 0xf6, 0xdc, 0x7c, 0xe8, 0xb8, 0xf0, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x43, 0xbc, 0xd7, 0xad, 0x7f, 0xeb, 0x5e, 0xfb, 0x6e, 0xff, 0x5b, 0xff, 0xed, 0xbf, 0xfe, 0xb7, 0xff, 0x76, 0xdf, 0x7b, 0xff, 0x5d, 0xf7, 0xbd, 0x6f, 0xd6, 0xbd, 0x60, 0x80, 
0x00, 0x00, 0x01, 0x08, 0x02, 0x1e, 0x15, 0x26, 0x5d, 0x2b, 0x35, 0x4f, 0x3d, 0xeb, 0x3f, 0xea, 0x7f, 0xaa, 0x3f, 0xed, 0x5b, 0xbf, 0x55, 0x7f, 0x95, 0x6f, 0x9a, 0x77, 0x0d, 0x06, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x01, 0x08, 0x01, 0x0a, 0x01, 0x16, 0x00, 0x05, 0x10, 0x05, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsosphereSmallMask[] = {
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 
0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 
0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 
0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM shaddow[] = {
32, 16,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM shaddowMask[] = {
0x00, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xa8, 0x50, 0xa8, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xa8, 0x54, 0xa8, 0x50, 0xa0, 0x40, 0x00, 0x00, 
0x00, 0x00, 0x02, 0x05, 0x0a, 0x15, 0x0a, 0x15, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x15, 0x0a, 0x15, 0x0a, 0x05, 0x02, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Bit[] = {
2, 2,
0x00, 0x00, 
};
const uint8_t PROGMEM BitMask[] = {
0x03, 0x03, 
};

const uint8_t PROGMEM SpikeSmall[] = {
32, 29,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0xd8, 0xf6, 0x5e, 0xf8, 0xa0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x80, 0x60, 0x00, 0xe0, 0x98, 0xf6, 0xad, 0x77, 0xdd, 0xf7, 0x5d, 0xff, 0xb5, 0xef, 0xbe, 0x68, 0xf0, 0x40, 0xc0, 0x40, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 
0x01, 0x11, 0x02, 0x23, 0x05, 0x27, 0x8a, 0x0d, 0x5b, 0x0c, 0xbb, 0x16, 0x7d, 0x57, 0xfa, 0xdf, 0xb5, 0x7f, 0xaa, 0x7f, 0xad, 0xdb, 0x2f, 0xfa, 0x8d, 0x77, 0x9b, 0x66, 0x9d, 0x73, 0x0d, 0x2a, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x04, 0x00, 0x1e, 0x05, 0x0b, 0x06, 0x01, 0x06, 0x01, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SpikeSmallMask[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 
0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM SmallTorus[] = {
32, 26,
0x00, 0x00, 0x40, 0xb0, 0xe8, 0xbc, 0x68, 0xde, 0x34, 0x1e, 0x2a, 0x3f, 0x2a, 0x17, 0x1d, 0x17, 0x0d, 0x0f, 0x1a, 0x2f, 0x1a, 0x2e, 0x1a, 0x36, 0xdc, 0xb4, 0xf8, 0xa8, 0x70, 0xc0, 0x00, 0x00, 
0x60, 0x60, 0xc9, 0xa2, 0xc5, 0x87, 0x8d, 0x0b, 0xbe, 0x96, 0x6c, 0x5a, 0x7e, 0x55, 0x3f, 0xb6, 0x3d, 0x6f, 0x1e, 0x7a, 0x2e, 0x3e, 0x6a, 0x1e, 0x2f, 0x1a, 0x07, 0x0d, 0x03, 0x82, 0x40, 0xc0, 
0x00, 0x05, 0x0a, 0x14, 0x21, 0x4e, 0x11, 0xab, 0x56, 0x24, 0xde, 0x08, 0xfd, 0x08, 0x12, 0xfa, 0x90, 0x78, 0xc8, 0x38, 0xc9, 0xb8, 0x40, 0x7c, 0x08, 0x34, 0x2a, 0x15, 0x0d, 0x13, 0x0c, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SmallTorusMask[] = {
0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 
0xe0, 0xe1, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe0, 
0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Blank[] = {
32, 16,
0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM BlankMask[] = {
0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};

const uint8_t PROGMEM SmallAcid1[] = {
34, 16,
0x80, 0x00, 0xc0, 0x40, 0xa0, 0xe0, 0x50, 0xe0, 0xb8, 0x68, 0xf0, 0xdc, 0xa8, 0x7e, 0xeb, 0x57, 0xfd, 0xab, 0xf7, 0x5f, 0xf6, 0xae, 0x7c, 0xec, 0xd8, 0xb8, 0xf0, 0xb0, 0xe0, 0x60, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x01, 0x07, 0x02, 0x0f, 0x05, 0x1b, 0x0f, 0x36, 0x1d, 0x77, 0x1d, 0xf7, 0xfd, 0xaf, 0xfa, 0xdf, 0xf5, 0x7f, 0x7d, 0x3f, 0x3a, 0x1f, 0x1e, 0x0f, 0x0e, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM SmallAcid2[] = {
34, 16,
0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0x70, 0xf8, 0xf8, 0x7c, 0xdc, 0xfe, 0xf6, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xef, 0xfe, 0xfe, 0xfc, 0xfc, 0x78, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x03, 0x06, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xdf, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM SmallAcid3[] = {
34, 16,
0x80, 0x80, 0xc0, 0x40, 0xe0, 0xa0, 0x50, 0xf0, 0x58, 0xe8, 0xbc, 0xf4, 0xbe, 0xea, 0x7f, 0xdb, 0x6d, 0xf7, 0x5f, 0xff, 0xb6, 0xee, 0x5c, 0xfc, 0xa8, 0xf8, 0xd0, 0xb0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x03, 0x06, 0x07, 0x0d, 0x0b, 0x1d, 0x1e, 0x3b, 0x36, 0x7f, 0x75, 0xdf, 0xf7, 0xbd, 0xaf, 0xfb, 0xdf, 0x6a, 0x7f, 0x3d, 0x3f, 0x1a, 0x1f, 0x0e, 0x0f, 0x06, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM SmallAcid4[] = {
32, 18,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0xc0, 0x80, 0x00, 0xe0, 0xd8, 0x6c, 0xba, 0xf7, 0xbe, 0xec, 0x78, 0xd0, 0xe0, 0xa0, 0x60, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x06, 0x06, 0x0e, 0x0d, 0x1b, 0x16, 0x3d, 0x27, 0x5e, 0x75, 0xae, 0xfb, 0xbf, 0xed, 0xbf, 0xeb, 0xfe, 0xb7, 0xfb, 0xaf, 0xfe, 0xbb, 0x6f, 0x7d, 0x36, 0x3d, 0x17, 0x1d, 0x0e, 0x0a, 0x06, 0x06, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SmallAcid5[] = {
34, 16,
0x80, 0x00, 0xc0, 0x80, 0x60, 0xc0, 0x60, 0x90, 0xe0, 0x58, 0xf8, 0xb4, 0xec, 0x0a, 0xed, 0x57, 0xbd, 0xdb, 0xf7, 0xbf, 0xee, 0x7e, 0xdc, 0x7c, 0xd8, 0xb8, 0xf0, 0xb0, 0xe0, 0x60, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x02, 0x03, 0x05, 0x06, 0x0f, 0x0d, 0x1a, 0x1f, 0x3b, 0x36, 0x5f, 0x75, 0xff, 0xd7, 0xfd, 0xef, 0xfa, 0xff, 0x7d, 0x77, 0x3f, 0x3d, 0x1f, 0x1a, 0x0f, 0x0e, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM SmallAcidMask[] = {
0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM SmallAcid4Mask[] = {
0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x06, 0x06, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x06, 0x06, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM SpinIsoSmall1[] = {
32, 30,
0x00, 0x00, 0x00, 0x80, 0x00, 0xe0, 0xa0, 0xd8, 0xf4, 0xac, 0xfc, 0xda, 0xf6, 0xde, 0x7c, 0xf7, 0xdd, 0xff, 0x6a, 0xfe, 0xb6, 0xfc, 0x6c, 0xf8, 0xd8, 0xf0, 0xa0, 0xc0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xda, 0x27, 0xdb, 0xae, 0x7b, 0xae, 0xfb, 0x5e, 0xf7, 0xbe, 0xfb, 0xaf, 0xff, 0xbd, 0xf7, 0xff, 0xaf, 0xfd, 0xdf, 0xfb, 0x6f, 0xfe, 0x5b, 0xfe, 0xd7, 0xbe, 0x65, 0xd8, 0x00, 
0x00, 0x00, 0x00, 0x0a, 0x05, 0x0a, 0x15, 0x0d, 0x33, 0x0d, 0x3f, 0xab, 0x76, 0xbb, 0xae, 0x7b, 0xae, 0xdb, 0x3e, 0xd7, 0x3d, 0xb6, 0x6f, 0x9d, 0x6b, 0x9f, 0x6a, 0x17, 0x0a, 0x15, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0a, 0x05, 0x02, 0x09, 0x02, 0x04, 0x01, 0x07, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SpinIsoSmall2[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0x50, 0xe8, 0x74, 0xdc, 0xf6, 0xbc, 0xee, 0xfa, 0xbe, 0xee, 0x7b, 0xfe, 0xd7, 0xfc, 0xee, 0xb8, 0xfc, 0xf0, 0xa8, 0xf0, 0x40, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x90, 0x27, 0xdd, 0x2a, 0xff, 0x55, 0xff, 0xab, 0xfe, 0xbb, 0x6f, 0xfe, 0xdb, 0x7f, 0xed, 0xff, 0xbe, 0xef, 0xfb, 0xbe, 0xef, 0xbb, 0xfe, 0xaf, 0xf5, 0x5f, 0xab, 0xfc, 0x00, 
0x00, 0x00, 0x02, 0x00, 0x05, 0x02, 0x05, 0x1d, 0x13, 0x6e, 0x9b, 0x76, 0xad, 0x7b, 0x8f, 0x7a, 0xaf, 0x7b, 0x56, 0xbf, 0x5a, 0xb7, 0x5e, 0xb5, 0x6f, 0x9a, 0x37, 0x4d, 0xbb, 0x06, 0x0b, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x0a, 0x01, 0x08, 0x02, 0x09, 0x02, 0x05, 0x0b, 0x04, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SpinIsoSmall3[] = {
32, 29,
0x00, 0x00, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xe0, 0x58, 0xf4, 0x7a, 0xde, 0xea, 0x7e, 0xda, 0xfe, 0x6a, 0xfe, 0xbe, 0xeb, 0xfe, 0xda, 0xfc, 0xe8, 0xb8, 0xf0, 0xa0, 0x60, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x77, 0xdd, 0xab, 0x7d, 0xd7, 0xbd, 0x5f, 0xf7, 0x7d, 0xdf, 0x7b, 0xdf, 0x7b, 0xff, 0xad, 0xff, 0xfe, 0xb7, 0xde, 0xff, 0x6b, 0xfe, 0x57, 0xff, 0xd5, 0xbe, 0x60, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x0c, 0x5b, 0x96, 0x2d, 0xb7, 0x2d, 0xd7, 0x3d, 0x2f, 0xbb, 0x6d, 0xdf, 0x2a, 0xff, 0x15, 0xfe, 0x17, 0x7d, 0x97, 0x6d, 0x9b, 0x6e, 0x13, 0x0e, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x08, 0x00, 0x01, 0x02, 0x0d, 0x02, 0x0d, 0x01, 0x04, 0x01, 0x02, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SpinIsoSmall4[] = {
32, 31,
0x00, 0x00, 0x00, 0x40, 0x80, 0xf0, 0xa0, 0xd0, 0x7c, 0xe8, 0xbe, 0xf5, 0xdf, 0x7d, 0xf6, 0xdf, 0xff, 0xb5, 0xfe, 0xdb, 0xff, 0xda, 0x7e, 0xf4, 0xd8, 0x70, 0xd0, 0x60, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x14, 0x6b, 0xb6, 0x6b, 0x9e, 0x75, 0xdf, 0xbb, 0xef, 0x7e, 0xdb, 0x7f, 0xf7, 0xde, 0x7b, 0xff, 0xaf, 0xfe, 0x7b, 0xef, 0xbf, 0xf5, 0x5f, 0xff, 0xd5, 0xbf, 0xfb, 0x46, 0xb8, 0x40, 
0x00, 0x00, 0x00, 0x07, 0x08, 0x0f, 0x11, 0x8f, 0x14, 0x37, 0x1d, 0xb7, 0x6d, 0x9b, 0x76, 0x9f, 0x75, 0x9f, 0x75, 0xaf, 0x3d, 0xef, 0x3a, 0xef, 0x15, 0xff, 0x56, 0x0d, 0x0b, 0x06, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0a, 0x15, 0x02, 0x09, 0x02, 0x04, 0x02, 0x01, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SpinIsoSmall5[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0x50, 0xf0, 0xb8, 0x6c, 0xf8, 0x5e, 0xf6, 0xbd, 0xf6, 0xde, 0xfa, 0xbe, 0xfa, 0x6e, 0xfc, 0xf6, 0x5c, 0xf8, 0x70, 0xd0, 0x60, 0xc0, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x40, 0xb2, 0x0f, 0xf2, 0x0d, 0xff, 0x75, 0xdf, 0x7d, 0xd7, 0x7f, 0xdd, 0xf7, 0x7f, 0xde, 0xfb, 0xbf, 0xf7, 0xdf, 0x7d, 0xef, 0x7b, 0xdf, 0xff, 0xb5, 0xdf, 0x7b, 0xae, 0xda, 0xa0, 
0x00, 0x00, 0x04, 0x03, 0x04, 0x0b, 0x04, 0x1b, 0x2f, 0x5a, 0xb5, 0x2f, 0xdb, 0x36, 0x5b, 0xed, 0x3f, 0x56, 0xfb, 0xaf, 0x7a, 0xd7, 0xbf, 0x55, 0xbf, 0x6a, 0x1f, 0x55, 0xab, 0x16, 0x05, 0x02, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x09, 0x12, 0x05, 0x08, 0x01, 0x04, 0x01, 0x06, 0x0d, 0x02, 0x09, 0x02, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM IsoRollUp1[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0xe0, 0x58, 0xf4, 0xbc, 0xea, 0xbf, 0xfa, 0xaf, 0xfa, 0xff, 0xad, 0xff, 0x7b, 0xee, 0xbb, 0xfe, 0xec, 0xfc, 0xb4, 0xf8, 0x68, 0xd0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x18, 0x37, 0x48, 0xb7, 0xdd, 0x77, 0xdd, 0x76, 0xdf, 0x75, 0xdf, 0x7b, 0xfe, 0xd7, 0x7f, 0xfd, 0x57, 0xff, 0xed, 0xbf, 0xf6, 0xbf, 0xee, 0x7b, 0xdf, 0xf5, 0x2f, 0xfd, 0xaa, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x05, 0x5a, 0xb5, 0x4f, 0xb9, 0x67, 0x9d, 0x73, 0x8f, 0x7a, 0xd7, 0x7f, 0xd5, 0xaf, 0x7e, 0x8b, 0x7f, 0x8a, 0x6f, 0x9b, 0x66, 0x1d, 0x2b, 0x0e, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x06, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollUp2[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0xf0, 0xa8, 0x78, 0xd4, 0xfc, 0xb6, 0xfe, 0xd5, 0x7f, 0xfa, 0xaf, 0xfe, 0xda, 0xfe, 0x76, 0xde, 0xfc, 0x74, 0xd8, 0x70, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xac, 0x53, 0xae, 0x5b, 0xd6, 0x7f, 0xd5, 0xbf, 0xfa, 0xaf, 0xfd, 0xbf, 0xeb, 0x7f, 0xfd, 0xaf, 0xff, 0xf5, 0x5f, 0xff, 0xf5, 0x5f, 0xfb, 0xef, 0xbd, 0xef, 0xba, 0x6e, 0xb0, 0x00, 
0x00, 0x00, 0x02, 0x05, 0x0a, 0x0b, 0x16, 0x2d, 0x5b, 0x2e, 0x5b, 0x76, 0xab, 0x7e, 0xab, 0xdd, 0x6f, 0xbb, 0xee, 0x5b, 0xbf, 0x55, 0xef, 0x1d, 0xf7, 0x0a, 0xff, 0x2a, 0x55, 0x2f, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x05, 0x03, 0x0c, 0x03, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollUp3[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0xd0, 0x68, 0xb8, 0xd4, 0xfc, 0xec, 0xbe, 0xea, 0xfe, 0xbb, 0xee, 0xfd, 0xb6, 0xfe, 0x6c, 0xfc, 0xac, 0xf8, 0xf4, 0xb0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xef, 0x38, 0xd7, 0xba, 0x6f, 0xf5, 0x5f, 0xfa, 0xaf, 0xff, 0xea, 0xbf, 0xf7, 0xde, 0x7b, 0xff, 0xdb, 0x7f, 0xed, 0x7f, 0xf6, 0xdf, 0x7a, 0xdf, 0xf6, 0x5f, 0xb4, 0x68, 0x80, 
0x00, 0x00, 0x00, 0x0a, 0x51, 0x06, 0x49, 0x13, 0x45, 0x1f, 0xeb, 0x2e, 0xdb, 0x6e, 0x9b, 0x76, 0x5f, 0xb5, 0x5f, 0xed, 0xb7, 0x5f, 0xe5, 0x5f, 0xb5, 0x4b, 0xbe, 0x55, 0x3b, 0x06, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x05, 0x02, 0x01, 0x06, 0x01, 0x02, 0x01, 0x06, 0x01, 0x06, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollUp4[] = {
32, 29,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x68, 0xd8, 0x74, 0xde, 0x74, 0xee, 0xfd, 0xb7, 0xfd, 0xdf, 0xfb, 0x6e, 0xfe, 0xba, 0xee, 0xfe, 0xba, 0xec, 0xf8, 0x50, 0xe0, 0x40, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xe2, 0x9d, 0x77, 0xad, 0xd7, 0xbd, 0x7b, 0xef, 0x7f, 0xda, 0x7f, 0xf7, 0xde, 0x7b, 0xef, 0xbf, 0xfd, 0xd7, 0xfe, 0x6f, 0xfd, 0xdf, 0x75, 0xff, 0x55, 0xff, 0x55, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x0f, 0x10, 0x0f, 0x34, 0x4b, 0x3d, 0x77, 0x4d, 0xbb, 0x6d, 0xd7, 0xad, 0x5b, 0xf7, 0x5e, 0xb5, 0x5f, 0xd5, 0x3b, 0x66, 0x5d, 0x2b, 0x76, 0x05, 0x02, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollUp5[] = {
32, 31,
0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xd0, 0x70, 0xdc, 0xf4, 0xac, 0xfa, 0xbc, 0xee, 0xfa, 0xdf, 0xfa, 0x6f, 0xfd, 0xfe, 0x56, 0xfc, 0xfc, 0x54, 0xf8, 0xd8, 0xf0, 0xa0, 0x40, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x04, 0x1b, 0xe4, 0x7b, 0xdd, 0xb7, 0xda, 0x7f, 0xd5, 0xfe, 0xaf, 0xfb, 0xbe, 0xf7, 0xdf, 0xfd, 0x6f, 0xfb, 0xff, 0xad, 0xff, 0xdb, 0xff, 0xb6, 0xff, 0xad, 0xf7, 0xdd, 0xb4, 0x68, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x7e, 0x03, 0x76, 0x0d, 0xab, 0x1e, 0xeb, 0x16, 0xff, 0x55, 0xbe, 0x6b, 0xdd, 0x77, 0xdb, 0x7e, 0xd5, 0x3f, 0xea, 0x5f, 0xaa, 0x77, 0xaa, 0x5d, 0x2a, 0x07, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x08, 0x07, 0x10, 0x07, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x14, 0x0b, 0x00, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM IsoRollRight1[] = {
32, 31,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0xf0, 0xa8, 0xf4, 0x5c, 0xf6, 0xbc, 0xee, 0xfa, 0xbe, 0xef, 0xfa, 0xbf, 0xf6, 0xde, 0xfa, 0x7c, 0xd4, 0xf8, 0x68, 0xf0, 0xc0, 0x40, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x20, 0x88, 0x76, 0x89, 0x76, 0xab, 0xde, 0xb7, 0x7d, 0xef, 0xdb, 0x7e, 0xeb, 0xbf, 0xf6, 0xdf, 0xfd, 0xbf, 0xf6, 0xdf, 0xfb, 0xbf, 0xed, 0x7f, 0xdb, 0xf6, 0xaf, 0xfd, 0x2a, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x0b, 0x16, 0x29, 0x17, 0x6a, 0x1d, 0xf7, 0x5d, 0xb7, 0x6a, 0xdf, 0x35, 0xee, 0x9b, 0x77, 0xda, 0xad, 0x77, 0x9d, 0x6b, 0x16, 0x2d, 0x12, 0x05, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollRight2[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xf0, 0xa0, 0xf0, 0xbc, 0xec, 0x7a, 0xd6, 0xff, 0x6d, 0xfb, 0xbf, 0xf6, 0xdf, 0xfd, 0xf6, 0xbe, 0xec, 0xbc, 0xf8, 0xa8, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x18, 0x66, 0x9b, 0x74, 0xcf, 0xba, 0x6f, 0xf5, 0x5f, 0xff, 0xb5, 0xff, 0xaf, 0xfd, 0xb7, 0xfe, 0x6f, 0xfd, 0xdf, 0xbd, 0xf7, 0xdf, 0xfa, 0xaf, 0xfd, 0x37, 0xed, 0xba, 0x64, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x07, 0x1a, 0x65, 0x17, 0xed, 0x13, 0xee, 0x5b, 0xb7, 0x6a, 0x9f, 0x75, 0x9f, 0x2b, 0xde, 0x57, 0x9d, 0x76, 0xab, 0x5e, 0x35, 0x0b, 0x06, 0x01, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x02, 0x04, 0x02, 0x01, 0x04, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollRight3[] = {
32, 30,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0xf8, 0xa8, 0x74, 0xdc, 0xf6, 0xfc, 0xaf, 0xfa, 0xdf, 0xfb, 0x6e, 0xff, 0xda, 0xff, 0xb6, 0xfe, 0x6c, 0xf8, 0xd8, 0x70, 0xe0, 0x40, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x5b, 0xb6, 0x6d, 0xd7, 0xbd, 0x6b, 0xdf, 0x7a, 0xaf, 0xff, 0xba, 0xef, 0xff, 0xb5, 0xff, 0xef, 0xbe, 0xfb, 0xef, 0xbf, 0xf5, 0xbf, 0xed, 0xb7, 0x7b, 0xae, 0x58, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x0f, 0x14, 0x0b, 0x56, 0x0d, 0x37, 0x8d, 0x77, 0x1a, 0x6f, 0xba, 0x6f, 0xda, 0x6f, 0xda, 0x77, 0xda, 0x2f, 0xda, 0x37, 0xce, 0x25, 0x0b, 0x15, 0x0d, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollRight4[] = {
32, 31,
0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xc0, 0xb0, 0xd0, 0xfc, 0xa8, 0xfc, 0xbc, 0xea, 0xfe, 0xb6, 0xfd, 0xee, 0xba, 0xfe, 0xd4, 0xfc, 0x6c, 0xf8, 0xd8, 0xf0, 0xa0, 0xc0, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x60, 0x8d, 0x32, 0xef, 0xba, 0x6f, 0xda, 0x7f, 0xaa, 0xff, 0xef, 0xba, 0xff, 0x77, 0xde, 0xfb, 0x6f, 0xff, 0xf6, 0x5f, 0xfb, 0xef, 0x7e, 0xdb, 0xff, 0x56, 0xfd, 0xd6, 0xb8, 0x00, 
0x00, 0x01, 0x00, 0x03, 0x14, 0x1b, 0x16, 0x2d, 0x5b, 0x6d, 0xd3, 0x3e, 0xd5, 0x7f, 0xd5, 0x7f, 0xd7, 0x2d, 0xff, 0x95, 0x7f, 0x97, 0x7d, 0xd7, 0x3d, 0xd7, 0xea, 0x3f, 0x4a, 0x15, 0x02, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x04, 0x0b, 0x06, 0x19, 0x06, 0x09, 0x06, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM IsoRollRight5[] = {
32, 32,
0x00, 0x00, 0x00, 0x00, 0xc0, 0xa0, 0x50, 0xe0, 0x78, 0xd4, 0xfa, 0xae, 0xfa, 0xfe, 0xaa, 0xfe, 0xda, 0xff, 0xeb, 0xfe, 0xb6, 0xfc, 0xf4, 0x58, 0xf8, 0xb0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xa8, 0x52, 0xad, 0x52, 0xbf, 0xed, 0xb7, 0x7b, 0xae, 0xff, 0xba, 0xef, 0x7d, 0xff, 0xd6, 0x7f, 0xff, 0xd6, 0x7f, 0xfd, 0x57, 0xff, 0x7d, 0xd7, 0xff, 0xad, 0x7b, 0xd6, 0x6a, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x06, 0x1d, 0x03, 0x1e, 0x75, 0x4b, 0xbd, 0x6a, 0xd7, 0xbd, 0x57, 0xfb, 0xae, 0x77, 0x5d, 0xbf, 0x55, 0xbf, 0x6b, 0xdd, 0x2f, 0xdb, 0x66, 0x9d, 0x23, 0x0d, 0x03, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x04, 0x12, 0x09, 0x02, 0x08, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM SoundIcon[] = {
5, 7,
0x1c, 0x00, 0x3e, 0x00, 0x7f, 
};

const uint8_t PROGMEM SoundIconMask[] = {
0x1c, 0x00, 0x3e, 0x00, 0x7f, 
};

const uint8_t PROGMEM RightArrow[] = {
4, 7,
0x7f, 0x3e, 0x1c, 0x08, 
};
const uint8_t PROGMEM RightArrowMask[] = {
0x7f, 0x3e, 0x1c, 0x08, 
};

const uint8_t PROGMEM LeftArrow[] = {
4, 7,
0x08, 0x1c, 0x3e, 0x7f, 
};
const uint8_t PROGMEM LeftArrowMask[] = {
0x08, 0x1c, 0x3e, 0x7f, 
};

// Play area components
uint8_t playGrid[11][11]; // matrix holding play area terrain heights or unique objects
uint8_t Objects[11][11]; // place level objects
int screenScrollX; // Scroll range -16 to +16 for 32 x 16 iso blocks
int screenScrollY; // Scroll range -8 to +8 for 32 x 16 iso blocks
int terrainDetectX; // -16 to 16 is oposite to scheenScrollX for accurate detection
int terrainDetectY;
int XdrawOffset; // find pixel location for block drawing
int YdrawOffset;
int RowXoffset;
int RowYoffset;
int screenActualX;
int screenActualY;
int Zoffset;
int globalLocationX; // track location in wourld for level genneration
int globalLocationY;
int globalLocationZ; // Depth Level
uint8_t levelType;
uint8_t animateFrame;

//General VAriables
uint8_t i; // for incrament loops
uint8_t xi; // for incrament x loops
uint8_t yi; // for incrament x loops
uint8_t xRand; // for random x cord genneration
uint8_t yRand;
uint8_t Rand; // for other random calculations
uint8_t Access; // for object genneration
int LargeReset = 16; // For scroll incraments
int SmallReset = 9; // for scroll incraments
bool upDown = false; // to detect direction change
bool leftRight = false;

// Player Object
bool playerExist = false; // if player esists
uint8_t PlayerX = 47; //Actual x cordinate of player
uint8_t PlayerY = 10;
int Life = 200;

uint8_t PlayerZ = 0; // Block height when in the ground
uint8_t PlayerRise = 0;
int PlayerSink = 0;
int ShaddowZ =20;
int Height = 0;
int Energy = 100; // Fuel for Thrust

// Particles
uint8_t bitNumber = 40;
uint8_t bitExist[41];
int bitX[41];
int bitY[41];
int bitXvelo[41]; // bit velocity
int bitYvelo[41];

int mUp; // Automate movement units one block at a time
int mDown;
int mLeft;
int mRight;
boolean Move = false; //detect if player currently moving
int Up = 0;

// Set up stuff
boolean Sound = true; //Sound on or off
boolean start = false; //Start play or not
boolean firstRun = true;

void setup()
{
  arduboy.begin();
  arduboy.setFrameRate(120);
  arduboy.initRandomSeed();
  arduboy.display();
}

void loop()
{

if (!arduboy.nextFrame())
{
  return;
}

// Boot Loader Intro and Title Screen
while(!start)
{
  if (!start)
  {
    // Intro
    if (firstRun == true)
    {
      for (int i = 1; i < 2000; i++)
      {
        xRand = rand() % 89 + 1;
        yRand = rand() % 17 + 1;
        arduboy.drawPixel(xRand+18,yRand+22,0);
        arduboy.display();
      }
      arduboy.clear();
      Sprites::drawOverwrite(0, 0, BlitterBrothers, 0);
      arduboy.display();
      arduboy.delayShort(2000);
      arduboy.clear();
      Sprites::drawOverwrite(0, 0, TitleScreen, 0);
      arduboy.display();
      arduboy.delayShort(4000);
    }
    arduboy.clear();

    // Title Screen
    // Reset Variables for new game

    levelType = 1;
    spawnNewLevel();

    playGrid[6][6] = 1; // ensure starting block is empty
    Objects[6][6] = 0;

    firstRun = false;
    PlayerSink = 0;
    playerExist = true;
    Energy = 100;
    Life = 200;
    animateFrame = 0;
    globalLocationX = 0 ; // reset, track location in world for level genneration
    globalLocationY = 0 ;
    globalLocationZ = 0 ;
    for (int i = 0 ; i < bitNumber; i++)
    {
      bitExist[i] == 1;
    }
    Sprites::drawOverwrite(0, 0, LargeBackground, 0);
    if (Sound == true)
    {
    Sprites::drawExternalMask(89, 28, SoundIcon, SoundIconMask, 0,  0);

    Sprites::drawExternalMask(97, 28, LeftArrow, LeftArrowMask, 0,  0);
    
    }
    if (Sound == false)
    {
    Sprites::drawExternalMask(97, 28, RightArrow, RightArrowMask, 0,  0);
    }
      if (arduboy.pressed(RIGHT_BUTTON))
      {
        Sound = true;
      }
      if (arduboy.pressed(LEFT_BUTTON))
      {
        Sound = false;
      }
    arduboy.display();
    if (arduboy.pressed(A_BUTTON))
    {
      start = true;
    }
    if (arduboy.pressed(B_BUTTON))
    {
      start = true;
    }
  }
}

arduboy.clear(); // Clear screen at beginning of Main loop
animateFrame ++;
if (animateFrame > 5) // 5 Frames of animation
{
  animateFrame = 1;
}

if (Height == 0) // Player Lands
{
  if (playGrid[6][6] > 0)
  {
    Energy = 100;
    if (Up == 1)
    {
      if (Sound == true)
      {
        sound.tone(NOTE_D3,100);
      }
      Up = 0;
      PlayerSink = 0;
    }
  }
}

if (PlayerSink < -50) // Opens next level
{
  playerDecend();
}

// Move Screen with direction buttons // Beginning of movement sequence

if (arduboy.pressed(UP_BUTTON))
{
  if (mUp == 0)
  {
    if (mRight == 0)
    {
      if (mLeft == 0)
      {
        if (playGrid[6][5] - Height < playGrid[6][6]+7) // block height detection, last figure creates a wall
        {
          if (playGrid[6][6] == 0 && playGrid[6][5] == 0 && Height < 1)  // to prevent "void hopping"
          {
            // Do not move
          }
          else
          {
          upDown = true;
          leftRight = false;
          mUp = SmallReset;
          PlayerSink = 0;
          globalLocationY = globalLocationY - 1;
          }
        }
        else
        {
          if (Sound == true)
          {
            sound.tone(NOTE_G3,100);
          }
        }
      }
    }
  }
}

if (mUp > 0)
{
  moveUp();
}

if (arduboy.pressed(DOWN_BUTTON))
{
  if (mDown == 0)
  {
    if (mRight == 0)
    {
      if (mLeft == 0)
      {
        if (playGrid[6][7] - Height < playGrid[6][6]+7) // block height detection, last figure creates a wall
        {
          if (playGrid[6][6] == 0 && playGrid[6][7] == 0 && Height < 1)  // to prevent "void hopping"
          {
            // Do not move
          }
          else
          {
          upDown = true;
          leftRight = false;
          mDown = SmallReset;
          PlayerSink = 0;
          globalLocationY = globalLocationY + 1;
          }
        }
        else
        {
          if (Sound == true)
          {
          sound.tone(NOTE_G3,100);
          }
        }
      }
    }
  }
}

if (mDown > 0)
{
  moveDown();
}

if (arduboy.pressed(RIGHT_BUTTON))
{
  if (mRight == 0)
  {
     if (mUp == 0)
    {
      if (mDown == 0)
      {
         if (playGrid[7][6] - Height < playGrid[6][6]+7) // block height detection, last figure creates a wall
         {
          if (playGrid[6][6] == 0 && playGrid[7][6] == 0 && Height < 1)  // to prevent "void hopping"
          {
            // Do not move
          }
          else
          {
          leftRight = true;
          upDown = false;
          mRight =SmallReset;
          PlayerSink = 0;
          globalLocationX = globalLocationX + 1;
          }
        }
        else
        {
          if (Sound == true)
          {
            sound.tone(NOTE_G3,100);
          }
        }
      }
    }
  }
}

if (mRight > 0)
{
  moveRight();
}

if (arduboy.pressed(LEFT_BUTTON))
{
  if (mLeft == 0)
  {
     if (mUp == 0)
    {
      if (mDown == 0)
      {
        if (playGrid[5][6] - Height < playGrid[6][6] + 7) // block height detection, last figure creates a wall
        {
          if (playGrid[6][6] == 0 && playGrid[5][5] == 0 && Height < 1)  // to prevent "void hopping"
          {
            // Do not move
          }
          else
          {
          leftRight = true;
          upDown = false;
          mLeft = SmallReset;
          PlayerSink = 0;
          globalLocationX = globalLocationX - 1;
          }
        }
        else
        {
          if (Sound == true)
          {
          sound.tone(NOTE_G3,100);
          }
        }
      }
    }
  }
}

if (mLeft > 0)
{
  moveLeft();
}

// End of movement sequence

if (arduboy.pressed(B_BUTTON))
{
  if (Energy > 0)
  {
  Up = 1;
  thrust();
  }
  else
  {
    if (Height > 0) // Gravity
    {
      Height--;

      if (PlayerRise >0)
      {
        PlayerRise--;
      }
    }
    else
    {
      if (playGrid[6][6] == 0)
      {
        PlayerSink--;
      }
    }
  }
}
else
{
  if (Height > 0) // Gravity
  {
    Height--;

    if (PlayerRise >0)
    {
      PlayerRise--;
    }
  }
  else
  {
    if (playGrid[6][6] == 0)
    {
      PlayerSink--;
    }
  }
}

// Draw Play Space
// Draw Play Space if Not Moving
int XdrawOffset = 0; // reset draw offset values
int YdrawOffset = 0;
int RowXoffset = 0;
int RowYoffset = 0;
int screenActualX = 63;
int screenActualY = -56;

if (mUp == 0)
{
  if (mDown == 0)
  {
    if (mLeft == 0)
    {
      if (mRight == 0)
      {
        Move = false;
      }
    }
  }
}

for (int i = 0 ; i < bitNumber; i++) // Move bits
{
  if (bitExist[i] ==1)
  {
    bitX[i] = bitX[i] + bitXvelo[i];
    bitY[i] = bitY[i] + bitYvelo[i];
    if (mUp > 0)
    {
      bitX[i] = bitX[i] - 2;
      bitY[i] = bitY[i] + 1;
    }
    if (mDown > 0)
    {
      bitX[i] = bitX[i] + 2;
      bitY[i] = bitY[i] - 1;
    }
    if (mRight > 0)
    {
      bitX[i] = bitX[i] - 2;
      bitY[i] = bitY[i] - 1;
    }
    if (mLeft > 0)
    {
      bitX[i] = bitX[i] + 2;
      bitY[i] = bitY[i] + 1;
    }
  }
  if (bitY[i] > 59)
  {
  bitExist[i] = 0;
  }
}

for (uint8_t yi = 0; yi < 11; yi++) // modifies terrain if shared with an Object
{
  for (uint8_t xi = 0 ; xi <11; xi ++)
  {
  if (Objects[xi][yi] == 1) /// Spike is Object 1
  {
    playGrid[xi][yi] = 1;
  }

  if (Objects[xi][yi] == 2) /// Torus is Object 2
  {
    playGrid[xi][yi] = 1;
  }

  if (Objects[xi][yi] == 3) /// Acid is Object 3
  {
    playGrid[xi][yi] = 0;
  }

  }
}


for (uint8_t yi = 0; yi < 11; yi++)
{
  for (uint8_t xi = 0 ; xi <11; xi ++)
  {
    if (playGrid[xi][yi] > 0) // if block exists at that grid location
    {
      Zoffset = playGrid[xi][yi]; // feed block valve into block height
      XdrawOffset = screenActualX + (xi * 17) - 16 + RowXoffset + screenScrollX;
      YdrawOffset = screenActualY + (yi * 9) + RowYoffset + screenScrollY - 25 ; // Last figure is a final offset


      //if (globalLocationZ < 22)

      if (globalLocationZ < 21)
      {      
      Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height, smallCube, ditherCubeSmallMask, 0,  0);
      }
      else
      {
      Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height+2, CylinderSmall, CylinderSmallMask, 0,  0); // +2 ajusts for Cylendar
      }


      if (Objects[xi][yi] == 1) // Spike
      {
        Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height-10, SpikeSmall, SpikeSmallMask, 0,  0); // - 16 to ajust block a little heigher
      }
      if (Objects[xi][yi] == 2) // Torus
      {
        Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height-5, SmallTorus, SmallTorusMask, 0,  0); // - 16 to ajust block a little heigher
      }
      if (xi == 6) // draw player shadown at correct location for overlap
      {
        if (yi == 6)
        {
          if (Move == false)
          {
            Zoffset = playGrid[6][6];// get player height
          }
          else
          {
            if (mUp > 0)
          {
            if (playGrid[6][5] > playGrid[6][6])
            {
              Zoffset = playGrid[6][5];
            }
          }
            if (mDown > 0)
            {
              if (playGrid[6][7] > playGrid[6][6])
              {
              Zoffset = playGrid[6][7];
              }
            }
            if (mRight > 0)
            {
              if (playGrid[7][6] > playGrid[6][6])
              {
                Zoffset = playGrid[7][6];
              }
            }
              if (mLeft > 0)
              {
                if (playGrid[5][6] > playGrid[6][6])
                {
                  Zoffset = playGrid[5][6];
                }
              }
            }
            if (PlayerSink > -1)
            {
              Sprites::drawExternalMask(PlayerX, PlayerY + ShaddowZ - Zoffset + Height, shaddow, shaddowMask, 0,  0); // Zoffset is reset anyway at next block draw
            }
            if (Move == true) // Player object while moving //// Overlap hack
            {
              if (mLeft > 0)
              {
                drawPlayer();
              }
            }
            if (Move == true) // Player object while moving //// Overlap hack
            {
              if (mUp > 0)
              {
                drawPlayer();
              }
            }
            if (Move == false)
            {
              drawPlayer(); // If not Moving draw Player
            }
          }
        }
        RowYoffset = RowYoffset + 9;
    }
    else // skip drawing blocks if empty BUT STILL DRAW ACID ------------------------------------------------------------
    {
      Zoffset = playGrid[xi][yi]; // feed block valve into block height
      XdrawOffset = screenActualX + (xi * 17) - 16 + RowXoffset + screenScrollX;
      YdrawOffset = screenActualY + (yi * 9) + RowYoffset + screenScrollY - 25 ; // Last figure is a final offset

      if (Objects[xi][yi] == 3) // Acid
      {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height + 5 , SmallAcid1, SmallAcidMask, 0,  0); // + ajustment for Acid
        }
        if (animateFrame == 2)
        {
          Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height + 5 , SmallAcid2, SmallAcidMask, 0,  0); // + ajustment for Acid
        }
        if (animateFrame == 3)
        {
          Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height + 5 , SmallAcid3, SmallAcidMask, 0,  0); // + ajustment for Acid
        }
        if (animateFrame == 4)
        {
          Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height + 5 , SmallAcid4, SmallAcid4Mask, 0,  0); // Ajust offset and have different mask
        }
        if (animateFrame == 5)
        {
          Sprites::drawExternalMask(XdrawOffset, YdrawOffset - Zoffset + Height + 5 , SmallAcid5, SmallAcidMask, 0,  0); // + ajustment for Acid
        }
      }


      RowYoffset = RowYoffset + 9;

      if (xi == 6)
      {
        if (yi == 6)
        {
        if (Move == true) // Player object while moving //// Overlap hack
        {
          if (mLeft > 0)
          {
            drawPlayer();
          }
        }
        if (Move == true) // Player object while moving //// Overlap hack
        {
          if (mUp > 0)
          {
            drawPlayer();
          }
        }
        if (Move == false)
        {
          drawPlayer(); // If not Moving draw Player
        }
      }
    }
  }
}
RowYoffset = 0;
RowXoffset = RowXoffset - 17;
}

  //Draw Objects above playspace moving towards camera
  if (Move == true) // Player object while moving //// Overlap hack
{
  if (mRight > 0)
  {
    drawPlayer();
  }
}

if (Move == true) // Player object while moving //// Overlap hack
{
  if (mDown > 0)
  {
    drawPlayer();
  }
}

// Cords for debugging
//arduboy.setCursor(100,5);
//arduboy.print(mLeft);

// Draw HUD

if (Energy < 100)
{
int BAR = (Energy/2);
arduboy.drawRect(2,10,6,52,0);
arduboy.fillRect(3,11+(50-BAR),4,BAR,0);
}

if (Objects[6][6] == 1) // Colission with Spike
{
  if (Height < 25)
  {
    Life = Life-2;
    if (Sound == true)
    {
    sound.tone(NOTE_A7,100);
    }
  }
}

if (Objects[6][6] == 2) // Collision with Torus
{
  if (Height < 15)
  {
  if (Life < 200)
  {
    Life++;
    if (Sound == true)
    {
    sound.tone(NOTE_A1,100);
    }
    }
  }
}

if (Objects[6][6] == 3) // Collision with Acid
{
  if (Height  < 1)
  {
  Life = Life - 5;
    if (Sound == true)
    {
    sound.tone(NOTE_A7,100);
    }
  }
}

if (Life < 200)
{
int BAR2 = (Life/4);
arduboy.drawRect(120,10,6,52,0);
arduboy.fillRect(121,11+(50-BAR2),4,BAR2,0);
}

if (Life < 0)
{
  playerDie();
}

arduboy.display(); // display screen at end of Main loop
//arduboy.delayShort(5); // Delay for debugging

} // End of Main Loop

void generateUp()
{
  // move values down
  for (xi = 0 ; xi < 11; xi++)
  {
    for (yi = 10 ; yi > 0; yi --)
    {
     playGrid[xi][yi] = playGrid[xi][yi-1];
     Objects[xi][yi] = Objects[xi][yi-1];
    }
  }
  for (xi = 0 ; xi <11; xi ++)
  {
    generateType();
    playGrid[xi][0] = Rand;
    Objects[xi][0] = Access;
  }
  //reset scroll
  screenScrollX = 0;
  screenScrollY = 0;
}

void generateDown()
{
  // move values up
  for (xi = 0 ; xi < 11; xi++)
  {
    for (yi = 0 ; yi < 11; yi ++)
    {
     playGrid[xi][yi] = playGrid[xi][yi+1];
     Objects[xi][yi] = Objects[xi][yi+1];
    }
  }

  for (xi = 0 ; xi <11; xi ++)
  {
    
    generateType();
    playGrid[xi][10] = Rand;
    Objects[xi][10] = Access;
  }
  //reset scroll
  screenScrollX = 0;
  screenScrollY = 0;
}

void generateRight()
{
// move values Left
  for (yi = 0 ; yi < 11; yi++)
  {
    for (xi = 0 ; xi < 11; xi ++)
    {
     playGrid[xi][yi] = playGrid[xi+1][yi];
     Objects[xi][yi] = Objects[xi+1][yi];
    }
  }
  for (yi = 0 ; yi <11; yi ++)
  {
    generateType();
    playGrid[10][yi] = Rand;
    Objects[10][yi] = Access;
  }
  //reset scroll
  screenScrollX = 0;
  screenScrollY = 0;
}

void generateLeft()
{

  for (yi = 0 ; yi < 11; yi++)
  {
    for (xi = 10 ; xi > 0; xi--)
    {
     playGrid[xi][yi] = playGrid[xi-1][yi];
     Objects[xi][yi] = Objects[xi-1][yi];
    }
  }
  for (yi = 0 ; yi <11; yi ++)
  {
    generateType();
    playGrid[0][yi] = Rand;
    Objects[0][yi] = Access;
    //playGrid[0][yi] = 1;
  }

  //reset scroll
  screenScrollX = 0;
  screenScrollY = 0;
}

void moveUp()
{
  mUp--;
  Move = true;
  if (screenScrollX > -LargeReset)
  {
    screenScrollX = screenScrollX -2;
    screenScrollY = screenScrollY +1;
  }
  else
  {
    generateUp();
  }
}

void moveDown()
{
  mDown--;
  Move = true;
  if (screenScrollX < LargeReset)
  {
    screenScrollX = screenScrollX +2;
    screenScrollY = screenScrollY -1;
  }
  else
  {
    generateDown();
  }
}

void moveLeft()
{
  mLeft--;
  Move = true;
  if (screenScrollX < LargeReset)
  {
    screenScrollX = screenScrollX +2;
    screenScrollY = screenScrollY +1;
  }
  else
  {
    generateLeft();
  }
}

void moveRight()
{
  mRight--;
  Move = true;
  if (screenScrollX > -LargeReset)
  {
    screenScrollX = screenScrollX -2;
    screenScrollY = screenScrollY -1;
  }
  else
  {
    generateRight();
  }
}

void thrust()
{
  Energy--;
  if (PlayerSink > -1)
  {
  if (Height < 34)
  {
    Height = Height + 1;
    //createBits();
  }
  else
  {
  if (PlayerRise < 25)
  {
    PlayerRise = PlayerRise + 1;
    //createBits();
  }
  }
  createBits();
  }
  if (PlayerSink < 0)
  {
    PlayerSink = PlayerSink + 1;
  }
  if (Sound == true)
  {
    sound.tone(NOTE_D6,10);
  }
}

void drawPlayer()
{
  for (int i = 0 ; i < bitNumber; i++) // Draw Exhast
  {
    if (bitExist[i] == 1)
    {
      Sprites::drawExternalMask(bitX[i], bitY[i], Bit, BitMask, 0,  0);
      //Arduboy2Base::drawPixel (bitX[i], bitY[i], 0);
    }
  }

  if (Move == false)
  {
    PlayerZ = playGrid[6][6];// get player height
  }
  else
  {
    if (mUp > 0)
    {
      if (playGrid[6][5] > playGrid[6][6])
      {
        PlayerZ = playGrid[6][5];
      }
    }
    if (mDown > 0)
    {
      if (playGrid[6][7] > playGrid[6][6])
      {
      PlayerZ = playGrid[6][7];
      }
    }
      if (mRight > 0)
    {
      if (playGrid[7][6] > playGrid[6][6])
      {
      PlayerZ = playGrid[7][6];
      }
    }
    if (mLeft > 0)
    {
      if (playGrid[5][6] > playGrid[6][6])
      {
      PlayerZ = playGrid[5][6];
      }
    }
  }

  if (Height == 0)
  {
    if (mDown > 0)
    {
      if (PlayerSink > -1)
      {
      Sprites::drawExternalMask(PlayerX, PlayerY + ShaddowZ - PlayerZ + Height, shaddow, shaddowMask, 0,  0); // if moving towards camera draw shaddow over block
      }    
    }
      if (mRight > 0)
    {
      if (PlayerSink > -1)
      {
      Sprites::drawExternalMask(PlayerX, PlayerY + ShaddowZ - PlayerZ + Height, shaddow, shaddowMask, 0,  0);
      }
    }

    if (Move == false)
    {
      Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, smallIso, IsosphereSmallMask, 0,  0);
    }
    else
    {
      if (mUp > 0)
      {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp1, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 2)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp2, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 3)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp3, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 4)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp4, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 5)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp5, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
      }

      if (mDown > 0)
      {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp5, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 2)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp4, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 3)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp3, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 4)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp2, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 5)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollUp1, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
      }  

      if (mRight > 0)
      {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight1, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 2)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight2, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 3)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight3, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 4)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight4, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 5)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight5, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
      }  

      if (mLeft > 0)
      {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight5, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 2)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight4, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 3)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight3, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 4)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight2, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
          if (animateFrame == 5)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, IsoRollRight1, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
      }  

    }
  }
  else
  {
    if (Height < 5)  // Take off and landing
  {
    if (mDown > 0)
    {
      if (PlayerSink > -1)
      {
      Sprites::drawExternalMask(PlayerX, PlayerY + ShaddowZ - PlayerZ + Height, shaddow, shaddowMask, 0,  0); // if moving towards camera draw shaddow over block
      }
    }
      if (mRight > 0)
    {
      if (PlayerSink > -1)
      {
      Sprites::drawExternalMask(PlayerX, PlayerY + ShaddowZ - PlayerZ + Height, shaddow, shaddowMask, 0,  0);
      }
    }

    Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerZ - PlayerSink, smallIso, IsosphereSmallMask, 0,  0);
    }
    else
    {
        if (animateFrame == 1)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerSink, SpinIsoSmall1, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
        if (animateFrame == 2)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerSink, SpinIsoSmall2, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
        if (animateFrame == 3)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerSink, SpinIsoSmall3, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
        if (animateFrame == 4)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerSink, SpinIsoSmall4, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
        if (animateFrame == 5)
        {
          Sprites::drawExternalMask(PlayerX, PlayerY - PlayerRise - PlayerSink, SpinIsoSmall5, IsosphereSmallMask, 0,  0); // Draw Player in the air
        }
  }
  }    
}

void createBits()
{
  for (int i = 0 ; i < bitNumber; i++)
  {
    if (bitExist[i] == 0) // Create bits if do not exist
    {
    bitExist[i] = 1;
    if (PlayerRise == 0)
    {
    bitX[i] = PlayerX+16;
    bitY[i] = PlayerY+26;
    }
    else
    {
      bitX[i] = PlayerX+16;
      bitY[i] = PlayerY+26 - PlayerRise;
    }
    Rand = rand() % 3+1;
    bitXvelo[i] = Rand - 2;
    Rand = rand() % 7 + 1;
    bitYvelo[i] = Rand;
    }
  }
}

void playerDie()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, GameOver, 0);
  playerExist = false;      
  arduboy.display();
  for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      playGrid[xi][yi] = 0;
      }
    }
  arduboy.delayShort(7000);
  arduboy.clear();
  arduboy.display();
  start=false;
}

void playerWin()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, WinScreen, 0);
  arduboy.setCursor(0,0);
  arduboy.print(" You saved the Entity! ");
  playerExist = false;      
  arduboy.display();
  for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      playGrid[xi][yi] = 0;
      }
    }  
  arduboy.delayShort(9000);
  arduboy.clear();
  arduboy.display();
  start=false;
}

void playerDecend()
{
arduboy.clear();
arduboy.display();
  PlayerRise = 25;
  Height = 35;
  Up = 1;
  PlayerSink = 0;
  globalLocationZ = globalLocationZ + 1; // as you decend z number increases for ease of understanding
  if (globalLocationZ == 23)
  {
  playerWin();
  }
  spawnNewLevel();
}

void spawnNewLevel() // define kinds of levels at which depth
{
 if (globalLocationZ < 3)
 {
  levelType1();
  }

if (globalLocationZ > 2)
 {
 if (globalLocationZ < 6)
 {
  levelType2();
 }
 }

  if (globalLocationZ > 5)
 {
 if (globalLocationZ < 9)
 {
  levelType3();
 }
 }

if (globalLocationZ > 8)
 {
 if (globalLocationZ < 12)
 {
  levelType4();
 }
 }

 if (globalLocationZ > 11)
 {
  if (globalLocationZ < 15)
 {
  levelType5(); // End of game
 }
 }

 if (globalLocationZ == 16)
 {
  levelType6();
 }

  if (globalLocationZ == 17)
 {
  levelType1();
 }

   if (globalLocationZ == 18)
 {
  levelType2();
 }

    if (globalLocationZ == 19)
 {
  levelType3();
 }

    if (globalLocationZ == 20)
 {
  levelType4();
 }

    if (globalLocationZ == 21)
 {
  levelType5();
 }

    if (globalLocationZ == 22)
 {
  levelType7();
 }

}

void levelType1() //General level
{
  levelType = 1;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 6 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance(); // generate objects based on a probability
      Objects[xi][yi] = Access;
      }
    }
}

void levelType2() // More Acid More dangerous
{
  levelType = 2;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 3 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void levelType3() // Hillier difficult to travese
{
  levelType = 3;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 10 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void levelType4() // Acid level
{
  levelType = 4;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 5 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void levelType5() // Peacefull level
{
  levelType = 5;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void levelType6() // Very hilly level
{
  levelType = 6;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 20 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void levelType7() // End level same and peacefull
{
  levelType = 7;
   for (xi = 0 ; xi < 11; xi++)
    {
      for (yi = 0 ; yi < 11; yi ++)
      {
      Rand = rand() % 3 + 1;
      playGrid[xi][yi] = Rand;
      objectPrevalance();
      Objects[xi][yi] = Access;
      }
    }
}

void generateType() // GENNERATE FRESH LEVEL WHILE MOVEING
{
  if (levelType == 1)
  {
    Rand = rand() % 6 + 1;
    spawnPortal();
    objectPrevalance();
  }

  if (levelType ==2)
  {
    Rand = rand() % 3 + 1;
    spawnPortal();
    objectPrevalance();
  }

  if (levelType ==3)
  {
    Rand = rand() % 10 + 1;
    spawnPortal();
    objectPrevalance();
  }

  if (levelType ==4)
  {
    Rand = 1;
    spawnPortal();
    objectPrevalance();
  }

  if (levelType ==5)
  {
    Rand = 1;
    spawnPortal();
    objectPrevalance();
  }

  if (levelType ==6)
  {
    Rand = rand() % 20 + 1;
    spawnPortal();
    objectPrevalance();
  }

    if (levelType ==7)
  {
    Rand = rand() % 3 + 1;
    spawnPortal();
    objectPrevalance();
  }

}

void objectPrevalance()
{
if (levelType == 1)
{
  Access = 0;
  int r = rand() % 999 + 1;
  if (r < 25) // chance Spike
  {
    Access = 1;
  }
  if ( r > 200 )
  {
    if (r < 225) // chance Torus
    {
      Access = 2;
    }
  }

}

if (levelType == 2)
{
  Access = 0;
  int r = rand() % 999 + 1;
  if (r < 75)
  {
    Access = 1;
  }
  if ( r > 400 )
  {
    if (r < 405)
    {
      Access = 2;
    }
  }
    if ( r > 500 )
    {
      if (r < 600)
      {
        Access = 3;
      }
    }
}

if (levelType == 3)
{
Access = 0;
  int r = rand() % 999 + 1;
  if (r < 100)
  {
    Access = 1;
  }

  if ( r > 400 )
  {
    if (r < 410)
    {
      Access = 2;
    }
  }

  if ( r > 600 )
    {
      if (r < 700)
      {
        Access = 3;
      }
    }
}

if (levelType == 4) // Acid level
{
  Access = 0;
  int r = rand() % 999 + 1;
  if (r < 10)
  {
    Access = 1;
  }
  if ( r > 200 )
  {
    if (r < 205)
    {
      Access = 2;
    }
  }

    if ( r > 300 )
    {
      if (r < 900)
      {
        Access = 3;
      }
    }
}

if (levelType == 5)
{
  Access = 0;
  int r = rand() % 999 + 1;

if (r < 50)
  {
    Access = 1;
  }

  if ( r > 200 )
  {
    if (r < 500)
    {
      Access = 2;
    }
  }
}

if (levelType == 6)
{
  Access = 0;
  // Populate with nothing
}

if (levelType == 7)
{
  Access = 0;
  int r = rand() % 999 + 1;

  if ( r > 200 )
  {
    if (r < 400)
    {
      Access = 2;
    }
  }
}

}

void spawnPortal() // creates portals in the floor to go to next level
{

if (levelType == 1)
{
  int r = rand() % 999 + 1;
  if (r < 50) // The lower this number the less frequent are portals
  {
  Rand = 0;
  }
}

if (levelType == 2)
{
  int r = rand() % 999 + 1;
  if (r < 22)
  {
  Rand = 0;
  }
}

if (levelType == 3)
{
  int r = rand() % 999 + 1;
  if (r < 10)
  {
  Rand = 0;
  }
}

if (levelType == 4)
{
  int r = rand() % 999 + 1;
  if (r < 15)
  {
  Rand = 0;
  }
}

if (levelType == 5)
{
  int r = rand() % 999 + 1;
  if (r < 22)
  {
  Rand = 0;
  }
}

if (levelType == 6)
{
  int r = rand() % 999 + 1;
  if (r < 15)
  {
  Rand = 0;
  }
}

if (levelType == 7)
{
  int r = rand() % 999 + 1;
  if (r < 10)
  {
  Rand = 0;
  }
}

}